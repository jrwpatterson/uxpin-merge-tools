// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The dump command run for the arui-feather repository prints the JSON describing the full repository 1`] = `
"{
  \\"categorizedComponents\\": [
    {
      \\"components\\": [
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const AMOUNT = {\\\\n    value: 123535,\\\\n    currency: {\\\\n        code: 'RUR',\\\\n        minority: 100\\\\n    }\\\\n};\\\\n<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div key={ size }>\\\\n            <Amount\\\\n                size={ size }\\\\n                amount={ AMOUNT }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const AMOUNT = {\\\\n    value: 123343,\\\\n    currency: {\\\\n        code: 'RUR',\\\\n        minority: 100\\\\n    }\\\\n};\\\\n<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div key={ size }>\\\\n            <Amount\\\\n                size={ size }\\\\n                amount={ AMOUNT }\\\\n                isHeading={ true }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/amount\\",
            \\"documentation\\": {
              \\"path\\": \\"src/amount/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/amount/amount.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Amount\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"amount\\",
              \\"type\\": {
                \\"name\\": \\"shape\\",
                \\"structure\\": {
                  \\"currency\\": {
                    \\"name\\": \\"shape\\",
                    \\"structure\\": {
                      \\"code\\": {
                        \\"name\\": \\"string\\",
                        \\"structure\\": {}
                      },
                      \\"minority\\": {
                        \\"name\\": \\"number\\",
                        \\"structure\\": {}
                      }
                    }
                  },
                  \\"value\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Отображение минорной части, если она нулевая\\",
              \\"isRequired\\": false,
              \\"name\\": \\"showZeroMinorPart\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Использовать компонент \`Heading\` для вывода числа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"isHeading\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <Attach size={ size } noFileText='' />\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Attach size={ size } noFileText='' disabled={ true } />\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"function handleChange(value) {\\\\n    setState({ value });\\\\n}\\\\n\\\\n<div>\\\\n    <div className='row'>\\\\n        <Attach\\\\n            size='s'\\\\n            noFileText=''\\\\n            buttonContent={ state.value ? 'Выберите другой файл' : 'Выберите файл' }\\\\n            onChange={ handleChange }\\\\n            buttonProps={ { pseudo: true } }\\\\n            value={ state.value }\\\\n        />\\\\n    </div>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"function handleChange(value) {\\\\n    setState({ value });\\\\n}\\\\n\\\\n<div>\\\\n    <div className='row'>\\\\n        <Attach\\\\n            accept='text/plain,'\\\\n            noFileText='.pdf, .xls'\\\\n            buttonContent={ 'Выберите файл' }\\\\n            size='s'\\\\n            onChange={ handleChange }\\\\n            value={ state.value }\\\\n        />\\\\n    </div>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/attach\\",
            \\"documentation\\": {
              \\"path\\": \\"src/attach/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/attach/attach.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Attach\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Содержимое поля ввода, указанное по умолчанию. Принимает массив объектов типа File или null.\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"array\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Уникальное имя блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Иконка\\",
              \\"isRequired\\": false,
              \\"name\\": \\"icon\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Последовательность перехода между контролами при нажатии на Tab\\",
              \\"isRequired\\": false,
              \\"name\\": \\"tabIndex\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"Нет файла\\"
              },
              \\"description\\": \\"Текст для случая, когда файл не загружен\\",
              \\"isRequired\\": false,
              \\"name\\": \\"noFileText\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"Выберите файл\\"
              },
              \\"description\\": \\"Содержимое кнопки для выбора файла\\",
              \\"isRequired\\": false,
              \\"name\\": \\"buttonContent\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Свойства для кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"buttonProps\\",
              \\"type\\": {
                \\"name\\": \\"shape\\",
                \\"structure\\": {
                  \\"checked\\": {
                    \\"name\\": \\"boolean\\",
                    \\"structure\\": {}
                  },
                  \\"className\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  },
                  \\"disabled\\": {
                    \\"name\\": \\"boolean\\",
                    \\"structure\\": {}
                  },
                  \\"id\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  },
                  \\"leftAddons\\": {
                    \\"name\\": \\"node\\",
                    \\"structure\\": {}
                  },
                  \\"name\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  },
                  \\"onBlur\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onClick\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onFocus\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onKeyDown\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onKeyUp\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onMouseDown\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onMouseEnter\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onMouseLeave\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onMouseUp\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"pseudo\\": {
                    \\"name\\": \\"boolean\\",
                    \\"structure\\": {}
                  },
                  \\"rightAddons\\": {
                    \\"name\\": \\"node\\",
                    \\"structure\\": {}
                  },
                  \\"size\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"s\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"m\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"l\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"xl\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"tabIndex\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"tag\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"button\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"span\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"text\\": {
                    \\"name\\": \\"node\\",
                    \\"structure\\": {}
                  },
                  \\"theme\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"alfa-on-color\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"alfa-on-white\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"title\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  },
                  \\"togglable\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"check\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"radio\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"type\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"button\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"reset\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"submit\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"view\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"default\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"action\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"extra\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"other\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"width\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"default\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"available\\"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"description\\": \\"Доступные для выбора MIME типы файлов\\",
              \\"isRequired\\": false,
              \\"name\\": \\"accept\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление возможностью изменения значения компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управляет возможностью выбора нескольких файлов\\",
              \\"isRequired\\": false,
              \\"name\\": \\"multiple\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по компоненту кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик изменения значения 'value'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на кнопку\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const buttons = [\\\\n    { size: 's', name: 'Применить' },\\\\n    { size: 'm', name: 'Применить' },\\\\n    { size: 'l', name: 'Применить' },\\\\n    { size: 'xl', name: 'Применить' }\\\\n];\\\\n<div>\\\\n    {buttons.map(({ size, name }) => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column' key={ size }>\\\\n                <Button size={ size }>{\`\${name}\`}</Button>\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Button size={ size } disabled={ true }>{\`\${name}\`}</Button>\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const buttons = [\\\\n    { size: 's', name: 'Показать' },\\\\n    { size: 'm', name: 'Показать' },\\\\n    { size: 'l', name: 'Показать' },\\\\n    { size: 'xl', name: 'Показать' }\\\\n];\\\\n<div>\\\\n    {buttons.map(({ size, name }) => (\\\\n        <div className='row' key={ size }>\\\\n            <Button pseudo={ true } size={ size }>{\`\${name}\`}</Button>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const buttons = [\\\\n    { size: 's', name: 'Продолжить' },\\\\n    { size: 'm', name: 'Продолжить' },\\\\n    { size: 'l', name: 'Продолжить' },\\\\n    { size: 'xl', name: 'Продолжить' }\\\\n];\\\\n<div>\\\\n    {buttons.map(({ size, name }) => (\\\\n        <div className='row' key={ size }>\\\\n            <Button view='action' size={ size }>{\`\${name}\`}</Button>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const buttons = [\\\\n    { size: 's', name: 'Оплатить' },\\\\n    { size: 'm', name: 'Оплатить' },\\\\n    { size: 'l', name: 'Оплатить' },\\\\n    { size: 'xl', name: 'Оплатить' }\\\\n];\\\\n<div>\\\\n    {buttons.map(({ size, name }) => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column' key={ size }>\\\\n                <Button view='extra' size={ size }>{\`\${name}\`}</Button>\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Button view='extra' size={ size } disabled={ true }>{\`\${name}\`}</Button>\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const buttons = [\\\\n    { size: 's', name: 'Подтвердить' },\\\\n    { size: 'm', name: 'Подтвердить' },\\\\n    { size: 'l', name: 'Подтвердить' },\\\\n    { size: 'xl', name: 'Подтвердить' }\\\\n];\\\\n<div>\\\\n    {buttons.map(({ size, name }) => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column' key={ size }>\\\\n                <Button view='other' size={ size }>{\`\${name}\`}</Button>\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Button view='other' size={ size } disabled={ true }>{\`\${name}\`}</Button>\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const buttons = [\\\\n    { size: 's', name: 'Скачать' },\\\\n    { size: 'm', name: 'Скачать' },\\\\n    { size: 'l', name: 'Скачать' },\\\\n    { size: 'xl', name: 'Скачать' }\\\\n];\\\\n<div>\\\\n    {buttons.map(({ size, name }) => (\\\\n        <div className='row' key={ size }>\\\\n            <Button\\\\n                icon={ <Icon size={ size } name='action-ok' /> }\\\\n                size={ size }\\\\n            >\\\\n                {\`\${name}\`}\\\\n            </Button>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const buttons = [\\\\n    { size: 's', name: 'Заказать карту' },\\\\n    { size: 'm', name: 'Заказать карту' },\\\\n    { size: 'l', name: 'Заказать карту' },\\\\n    { size: 'xl', name: 'Заказать карту' }\\\\n];\\\\n<div>\\\\n    {buttons.map(({ size, name }) => (\\\\n        <div className='row' key={ size }>\\\\n            <Button width='available' size={ size }>{\`\${name}\`}</Button>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/button\\",
            \\"documentation\\": {
              \\"path\\": \\"src/button/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/button/button.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Button\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Текст кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"text\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Иконка кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"icon\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Список произвольных элементов в левом слоте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"rightAddons\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Список произвольных элементов в правом слоте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"leftAddons\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тип кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"view\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"action\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"extra\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"other\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"button\\"
              },
              \\"description\\": \\"Поведение кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"button\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"reset\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"submit\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"button\\"
              },
              \\"description\\": \\"HTML элемент, которым будет компонент в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"tag\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"button\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"span\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление шириной кнопки. При значении 'available' растягивает кнопку на ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление возможности взаимодействия с компонентом\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Отображение кнопки в состоянии фокуса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"focused\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Псевдо представление кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"pseudo\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Отключает валидацию полей формы, у которых есть атрибут pattern\\",
              \\"isRequired\\": false,
              \\"name\\": \\"formNoValidate\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Имя компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Текст всплывающей подсказки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Последовательность перехода между контролами при нажатии на Tab\\",
              \\"isRequired\\": false,
              \\"name\\": \\"tabIndex\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тип переключателя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"togglable\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"check\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"radio\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Отображение кнопки в отмеченном (зажатом) состоянии\\",
              \\"isRequired\\": false,
              \\"name\\": \\"checked\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Button\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по кнопке\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на кнопку\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события нажатия кнопки мыши в момент\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события отжатия кнопки мыши в момент\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseUp\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события отведения курсора с кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseOut\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyUp\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"initialState = {\\\\n    date: Date.now()\\\\n};\\\\n<Calendar\\\\n    value={ state.date }\\\\n    onValueChange={ (newDate) => {\\\\n        setState({\\\\n            date: newDate\\\\n        });\\\\n    } }\\\\n/>\\"
              },
              {
                \\"code\\": \\"const addDays = require('date-fns/add_days');\\\\nconst subtractDays = require('date-fns/sub_days');\\\\n\\\\ninitialState = {\\\\n    date: Date.now(),\\\\n    earlierLimit: subtractDays(new Date(), 3).valueOf(),\\\\n    laterLimit: addDays(new Date(), 1).valueOf()\\\\n};\\\\n\\\\n<Calendar\\\\n    value={ state.date }\\\\n    earlierLimit={ state.earlierLimit }\\\\n    laterLimit={ state.laterLimit }\\\\n    onValueChange={ (newDate) => {\\\\n        setState({\\\\n            date: newDate\\\\n        });\\\\n    } }\\\\n/>\\"
              },
              {
                \\"code\\": \\"const addDays = require('date-fns/add_days');\\\\nconst startOfDay = require('date-fns/start_of_day');\\\\nconst subtractDays = require('date-fns/sub_days');\\\\n\\\\ninitialState = {\\\\n    date: Date.now()\\\\n};\\\\nconst offDays = [subtractDays(new Date(), 2), addDays(new Date(), 2)]\\\\n    .map(date => startOfDay().valueOf(date));\\\\n\\\\n<Calendar\\\\n    value={ state.date }\\\\n    offDays={ offDays }\\\\n    onValueChange={ (newDate) => {\\\\n        setState({\\\\n            date: newDate\\\\n        });\\\\n    } }\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/calendar\\",
            \\"documentation\\": {
              \\"path\\": \\"src/calendar/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/calendar/calendar.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Calendar\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Выбранная дата, в формате unix timestamp\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": null
              },
              \\"description\\": \\"Левая граница диапазона дат, в формате unix timestamp\\",
              \\"isRequired\\": false,
              \\"name\\": \\"selectedFrom\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": null
              },
              \\"description\\": \\"Правая граница диапазона дат, в формате unix timestamp\\",
              \\"isRequired\\": false,
              \\"name\\": \\"selectedTo\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Левая граница дат, возможных для выбора, в формате unix timestamp\\",
              \\"isRequired\\": false,
              \\"name\\": \\"earlierLimit\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Правая граница дат, возможных для выбора, в формате unix timestamp\\",
              \\"isRequired\\": false,
              \\"name\\": \\"laterLimit\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Месяц, в формате unix timestamp\\",
              \\"isRequired\\": false,
              \\"name\\": \\"month\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик смены даты\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onValueChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик смены месяца\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMonthChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"DD.MM.YYYY\\"
              },
              \\"description\\": \\"Тип форматирования даты при выводе\\",
              \\"isRequired\\": false,
              \\"name\\": \\"outputFormat\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": [
                  \\"Январь\\",
                  \\"Февраль\\",
                  \\"Март\\",
                  \\"Апрель\\",
                  \\"Май\\",
                  \\"Июнь\\",
                  \\"Июль\\",
                  \\"Август\\",
                  \\"Сентябрь\\",
                  \\"Октябрь\\",
                  \\"Ноябрь\\",
                  \\"Декабрь\\"
                ]
              },
              \\"description\\": \\"Список названий месяцев\\",
              \\"isRequired\\": false,
              \\"name\\": \\"months\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": [
                  \\"Пн\\",
                  \\"Вт\\",
                  \\"Ср\\",
                  \\"Чт\\",
                  \\"Пт\\",
                  \\"Сб\\",
                  \\"Вс\\"
                ]
              },
              \\"description\\": \\"Список названий дней недели\\",
              \\"isRequired\\": false,
              \\"name\\": \\"weekdays\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": []
              },
              \\"description\\": \\"Список выходных дней в виде unix timestamp, отсортированный по возрастанию\\",
              \\"isRequired\\": false,
              \\"name\\": \\"offDays\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Отображение стрелок навигации по месяцам\\",
              \\"isRequired\\": false,
              \\"name\\": \\"showArrows\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Возможность управления календарём с клавиатуры\\",
              \\"isRequired\\": false,
              \\"name\\": \\"isKeyboard\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyUp\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <CalendarInput\\\\n                size={ size }\\\\n                defaultValue='01.02.2016'\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <CalendarInput size={ size } defaultValue='41.12.2031' error='Такой даты не существует' />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const formatDate = require('date-fns/format');\\\\n\\\\n<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <CalendarInput size={ size } placeholder={ formatDate(new Date(), 'DD.MM.YYYY') } width='available' />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/calendar-input\\",
            \\"documentation\\": {
              \\"path\\": \\"src/calendar-input/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/calendar-input/calendar-input.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"CalendarInput\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Содержимое поля ввода\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Содержимое поля ввода, указанное по умолчанию\\",
              \\"isRequired\\": false,
              \\"name\\": \\"defaultValue\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Свойства компонента [Calendar](../calendar/)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"calendar\\",
              \\"type\\": {
                \\"name\\": \\"shape\\",
                \\"structure\\": {
                  \\"className\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  },
                  \\"earlierLimit\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"error\\": {
                    \\"name\\": \\"node\\",
                    \\"structure\\": {}
                  },
                  \\"isKeyboard\\": {
                    \\"name\\": \\"boolean\\",
                    \\"structure\\": {}
                  },
                  \\"laterLimit\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"month\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"months\\": {
                    \\"name\\": \\"typedArray\\",
                    \\"structure\\": {
                      \\"memberType\\": {
                        \\"name\\": \\"string\\",
                        \\"structure\\": {}
                      }
                    }
                  },
                  \\"offDays\\": {
                    \\"name\\": \\"typedArray\\",
                    \\"structure\\": {
                      \\"memberType\\": {
                        \\"name\\": \\"number\\",
                        \\"structure\\": {}
                      }
                    }
                  },
                  \\"onBlur\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onFocus\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onKeyDown\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onKeyUp\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onMonthChange\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onValueChange\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"outputFormat\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  },
                  \\"selectedFrom\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"selectedTo\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"showArrows\\": {
                    \\"name\\": \\"boolean\\",
                    \\"structure\\": {}
                  },
                  \\"theme\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"alfa-on-color\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"alfa-on-white\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"value\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"weekdays\\": {
                    \\"name\\": \\"typedArray\\",
                    \\"structure\\": {
                      \\"memberType\\": {
                        \\"name\\": \\"string\\",
                        \\"structure\\": {}
                      }
                    }
                  }
                }
              }
            },
            {
              \\"description\\": \\"Управление возможностью раскрытия календаря\\",
              \\"isRequired\\": false,
              \\"name\\": \\"opened\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление возможностью компонента занимать всю ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": [
                  \\"bottom-left\\",
                  \\"bottom-right\\",
                  \\"top-left\\",
                  \\"top-right\\"
                ]
              },
              \\"description\\": \\"Направления, в которые может открываться попап компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"directions\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"anchor\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-left\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-right\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-top\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-bottom\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-top\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-bottom\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-left\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-right\\"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменения значения компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Последовательность перехода между контролами при нажатии на Tab\\",
              \\"isRequired\\": false,
              \\"name\\": \\"tabIndex\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Управление рендером иконки календаря в инпуте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"withIcon\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Лейбл для поля\\",
              \\"isRequired\\": false,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"00.00.0000\\"
              },
              \\"description\\": \\"Подсказка в поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"placeholder\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Подсказка под полем\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hint\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Отображение ошибки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"native\\"
              },
              \\"description\\": \\"Управление нативным режимом на мобильных устройствах\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mobileMode\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"native\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"popup\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Подсказка над меню в мобильном режиме\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mobileTitle\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Имя компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Обработчик установки фокуса на компонент\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса с компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик установки фокуса на поле ввода\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onInputFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса с поля ввода\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onInputBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик ввода даты в текстовом поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onInputChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик выбора даты в календаре\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onCalendarChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обрабочик изменения даты в календаре\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события нажатия на клавишу в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится в календаре\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onCalendarKeyDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на текстовом поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onInputKeyDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const sizes = ['s', 'm', 'l', 'xl'];\\\\n<div>\\\\n    {sizes.map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <CardInput size={ size } placeholder='Введите номер карты' />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/card-input\\",
            \\"documentation\\": {
              \\"path\\": \\"src/card-input/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/card-input/card-input.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"CardInput\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"0000 0000 0000 0000 00\\"
              },
              \\"description\\": \\"Подсказка в текстовом поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"placeholder\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    <div>\\\\n        {['m', 'l'].map(size => (\\\\n            <div className='row' key={ size }>\\\\n                <div className='column'>\\\\n                    <CheckBox\\\\n                        text='Согласен с условиями'\\\\n                        size={ size }\\\\n                    />\\\\n                </div>\\\\n                <div className='column'>\\\\n                    <CheckBox\\\\n                        text='Согласен с условиями'\\\\n                        size={ size }\\\\n                        disabled={ true }\\\\n                    />\\\\n                </div>\\\\n            </div>\\\\n        ))}\\\\n    </div>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"<div>\\\\n    <div>\\\\n        {['s', 'm', 'l', 'xl'].map(size => (\\\\n            <div className='row' key={ size }>\\\\n                <div className='column'>\\\\n                    <CheckBox\\\\n                        text='Согласен с условиями'\\\\n                        type='button'\\\\n                        size={ size }\\\\n                    />\\\\n                </div>\\\\n                <div className='column'>\\\\n                    <CheckBox\\\\n                        text='Согласен с условиями'\\\\n                        type='button'\\\\n                        size={ size }\\\\n                        disabled={ true }\\\\n                    />\\\\n                </div>\\\\n            </div>\\\\n        ))}\\\\n    </div>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"<div>\\\\n    {['m', 'l'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <CheckBox\\\\n                    text='Выбраны не все услуги'\\\\n                    size={ size }\\\\n                    indeterminate={ true }\\\\n                />\\\\n            </div>\\\\n            <div className='column'>\\\\n                <CheckBox\\\\n                    text='Выбраны не все услуги'\\\\n                    size={ size }\\\\n                    disabled={ true }\\\\n                    indeterminate={ true }\\\\n                />\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/checkbox\\",
            \\"documentation\\": {
              \\"path\\": \\"src/checkbox/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/checkbox/checkbox.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Checkbox\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Текст подписи к чекбоксу\\",
              \\"isRequired\\": false,
              \\"name\\": \\"text\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Имя компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Текст всплывающей подсказки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Значение чекбокса, которое будет отправлено на сервер, если он выбран\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление шириной кнопки для типа 'button'. При значении 'available' растягивает кнопку на ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"normal\\"
              },
              \\"description\\": \\"Тип чекбокса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"normal\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"button\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменять состояние 'checked' компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление состоянием вкл/выкл компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"checked\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление неопределенным состоянием чекбокса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"indeterminate\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса комнонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на чекбокс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с чекбокса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<CheckBoxGroup label={ <Label size='m'>Выберите счёт</Label> }>\\\\n    <CheckBox\\\\n        text='Текущий счет'\\\\n        value='Текущий'\\\\n    />\\\\n    <CheckBox\\\\n        text='Основной счет'\\\\n        value='Основной'\\\\n    />\\\\n    <CheckBox\\\\n        text='Семейный счет'\\\\n        value='Семейный'\\\\n    />\\\\n    <CheckBox\\\\n        text='Зарплатный счет'\\\\n        value='Зарплатный'\\\\n    />\\\\n</CheckBoxGroup>\\"
              },
              {
                \\"code\\": \\"<CheckBoxGroup type='button'>\\\\n    <CheckBox\\\\n        disabled={ true }\\\\n        text='Текущий'\\\\n        type='button'\\\\n        value='Текущий'\\\\n    />\\\\n    <CheckBox\\\\n        text='Основной'\\\\n        type='button'\\\\n        value='Основной'\\\\n    />\\\\n    <CheckBox\\\\n        text='Семейный'\\\\n        disabled={ true }\\\\n        type='button'\\\\n        value='Семейный'\\\\n    />\\\\n    <CheckBox\\\\n        text='Зарплатный'\\\\n        type='button'\\\\n        value='Зарплатный'\\\\n    />\\\\n</CheckBoxGroup>\\"
              },
              {
                \\"code\\": \\"<CheckBoxGroup type='line'>\\\\n    <CheckBox\\\\n        text='Текущий'\\\\n        value='Текущий'\\\\n    />\\\\n    <CheckBox\\\\n        text='Основной'\\\\n        value='Основной'\\\\n    />\\\\n    <CheckBox\\\\n        text='Семейный'\\\\n        value='Семейный'\\\\n    />\\\\n    <CheckBox\\\\n        text='Зарплатный'\\\\n        value='Зарплатный'\\\\n    />\\\\n</CheckBoxGroup>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/checkbox-group\\",
            \\"documentation\\": {
              \\"path\\": \\"src/checkbox-group/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/checkbox-group/checkbox-group.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"CheckboxGroup\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"normal\\"
              },
              \\"description\\": \\"Тип компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"normal\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"button\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"line\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Выбранные чекбокс-кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"string\\",
                          \\"structure\\": {}
                        },
                        {
                          \\"name\\": \\"number\\",
                          \\"structure\\": {}
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"description\\": \\"Отображение попапа с ошибкой в момент когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Уникальное имя блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменения состояния 'checked' дочерних компонентов \`CheckBox\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`CheckBoxGroup\`, как правило, компоненты \`CheckBox\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Лейбл для группы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса радиогруппы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса с радиогруппы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик изменения значения 'checked' одного из дочерних радио-кнопок\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"function handleExpandedChange(isExpanded) {\\\\n    setState({ isExpanded });\\\\n}\\\\ninitialState = {\\\\n    isExpanded: true\\\\n};\\\\n<Collapse\\\\n    collapsedLabel='Подробнее'\\\\n    expandedLabel='Скрыть'\\\\n    isExpanded={ state.isExpanded }\\\\n    onExpandedChange={ handleExpandedChange }\\\\n>\\\\n    <Paragraph>\\\\n        Альфа-Банк, основанный в&nbsp;1990 году, является универсальным банком,\\\\n        осуществляющим все основные виды банковских операций, представленных\\\\n        на&nbsp;рынке финансовых услуг, включая обслуживание частных и&nbsp;\\\\n        корпоративных клиентов, инвестиционный банковский бизнес, торговое финансирование и&nbsp;т.д.\\\\n    </Paragraph>\\\\n</Collapse>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/collapse\\",
            \\"documentation\\": {
              \\"path\\": \\"src/collapse/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/collapse/collapse.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Collapse\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Управление \`expanded\` состоянием компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"isExpanded\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"Expand\\"
              },
              \\"description\\": \\"Текст ссылки в \`expanded\` состоянии\\",
              \\"isRequired\\": false,
              \\"name\\": \\"collapsedLabel\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"Collapse\\"
              },
              \\"description\\": \\"Текст ссылки в \`collapsed\` состоянии\\",
              \\"isRequired\\": false,
              \\"name\\": \\"expandedLabel\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Collapse\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик смены состояний \`expanded/collapsed\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onExpandedChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    <div className='row' >\\\\n        <Dropdown\\\\n            size='s'\\\\n            popupContent='Последние 3 цифры на обороте карты'\\\\n        >\\\\n            Подробнее\\\\n        </Dropdown>\\\\n    </div>\\\\n    <div className='row' >\\\\n        <Dropdown\\\\n            size='m'\\\\n            popupContent='Последние 3 цифры на обороте карты'\\\\n            popupProps={ {\\\\n                directions: ['right-center'],\\\\n                type: 'tooltip'\\\\n            } }\\\\n        >\\\\n            Подробнее\\\\n        </Dropdown>\\\\n    </div>\\\\n    <div className='row' >\\\\n        <Dropdown\\\\n            size='l'\\\\n            popupContent='Последние 3 цифры на обороте карты'\\\\n            switcherText='Подробнее'\\\\n            disabled={ true }\\\\n            popupProps={ {\\\\n                directions: ['right-center'],\\\\n                type: 'tooltip'\\\\n            } }\\\\n        />\\\\n    </div>\\\\n    <div className='row' >\\\\n        <Dropdown\\\\n            size='xl'\\\\n            popupContent='Последние 3 цифры на обороте карты'\\\\n            popupProps={ {\\\\n                directions: ['bottom-center'],\\\\n                type: 'tooltip'\\\\n            } }\\\\n        >\\\\n            Подробнее\\\\n        </Dropdown>\\\\n    </div>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/dropdown\\",
            \\"documentation\\": {
              \\"path\\": \\"src/dropdown/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/dropdown/dropdown.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Dropdown\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"link\\"
              },
              \\"description\\": \\"Тип компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"switcherType\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"link\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"button\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"Switcher\\"
              },
              \\"description\\": \\"Текст кнопки компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"switcherText\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Компонент [Popup](../popup/)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"popupContent\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": {
                  \\"target\\": \\"anchor\\"
                }
              },
              \\"description\\": \\"Свойства для компонента [Popup](../popup/)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"popupProps\\",
              \\"type\\": {
                \\"name\\": \\"shape\\",
                \\"structure\\": {
                  \\"className\\": {
                    \\"name\\": \\"string\\",
                    \\"structure\\": {}
                  },
                  \\"directions\\": {
                    \\"name\\": \\"typedArray\\",
                    \\"structure\\": {
                      \\"memberType\\": {
                        \\"name\\": \\"union\\",
                        \\"structure\\": {
                          \\"elements\\": [
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"anchor\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"top-left\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"top-center\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"top-right\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"left-top\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"left-center\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"left-bottom\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"right-top\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"right-center\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"right-bottom\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"bottom-left\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"bottom-center\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"bottom-right\\"
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  \\"fitContaiterOffset\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"height\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"default\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"available\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"adaptive\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"invalid\\": {
                    \\"name\\": \\"boolean\\",
                    \\"structure\\": {}
                  },
                  \\"mainOffset\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"maxWidth\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"minWidth\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"onClickOutside\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onMouseEnter\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"onMouseLeave\\": {
                    \\"name\\": \\"func\\",
                    \\"structure\\": {}
                  },
                  \\"padded\\": {
                    \\"name\\": \\"boolean\\",
                    \\"structure\\": {}
                  },
                  \\"secondaryOffset\\": {
                    \\"name\\": \\"number\\",
                    \\"structure\\": {}
                  },
                  \\"size\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"s\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"m\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"l\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"xl\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"target\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"anchor\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"position\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"screen\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"theme\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"alfa-on-color\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"alfa-on-white\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"type\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"default\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"tooltip\\"
                          }
                        }
                      ]
                    }
                  },
                  \\"visible\\": {
                    \\"name\\": \\"boolean\\",
                    \\"structure\\": {}
                  }
                }
              }
            },
            {
              \\"description\\": \\"Управление возможностью отображать попап при наведении курсора\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mode\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"hover\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"normal\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление возможностью открытия попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление состоянием открыт/закрыт попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"opened\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Только для switcherType='button'. Тип переключателя для кнопки, 'check'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"togglable\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"button\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"check\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Dropdown\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по кнопке компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onSwitcherClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на кнопку компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onSwitcherMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с кнопки компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onSwitcherMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на попап\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onPopupMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onPopupMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события клика попапа за пределами попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onPopupClickOutside\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<EmailInput placeholder='Введите e-mail' />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/email-input\\",
            \\"documentation\\": {
              \\"path\\": \\"src/email-input/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/email-input/email-input.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"EmailInput\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    <div className='row'>\\\\n        {\\\\n            ['by', 'kz', 'ru', 'ua'].map(item => (\\\\n                <div className='col' style={ { marginRight: '6px' } }>\\\\n                    <FlagIcon\\\\n                        country={ item }\\\\n                        size='s'\\\\n                    />\\\\n                </div>\\\\n            ))\\\\n        }\\\\n    </div>\\\\n    <div className='row'>\\\\n        {\\\\n            ['au', 'ai', 'bm', 'io', 'vg', 'gb', 'ky', 'ms',\\\\n                'nu', 'nz', 'sh', 'ck', 'tc', 'tv', 'fj', 'fk'].map(item => (\\\\n                <div className='col' style={ { marginRight: '6px' } }>\\\\n                    <FlagIcon\\\\n                        country={ item }\\\\n                        size='m'\\\\n                    />\\\\n                </div>\\\\n            ))\\\\n        }\\\\n    </div>\\\\n    <div className='row'>\\\\n        {\\\\n            ['cy', 'gr', 'il', 'it', 'pl', 'rs', 'se'].map(item => (\\\\n                <div className='col' style={ { marginRight: '6px' } }>\\\\n                    <FlagIcon\\\\n                        country={ item }\\\\n                        size='l'\\\\n                    />\\\\n                </div>\\\\n            ))\\\\n        }\\\\n    </div>\\\\n    <div className='row' style={ { alignItems: 'flex-start', flexWrap: 'wrap' } }>\\\\n        {\\\\n            ['ar', 'hk', 'mq', 'pm', 'ki', 'kr'].map(item => (\\\\n                <div className='col' style={ { marginRight: '6px' } }>\\\\n                    <FlagIcon\\\\n                        country={ item }\\\\n                        size='xl'\\\\n                    />\\\\n                </div>\\\\n            ))\\\\n        }\\\\n    </div>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const countries = require('../lib/countries').default;\\\\n\\\\nconst countriesList = countries.getCountries();\\\\n\\\\n<div>\\\\n    {\\\\n        ['s', 'm', 'l', 'xl'].map(size => (\\\\n            <div className='row' style={ { alignItems: 'flex-start', flexWrap: 'wrap' } }>\\\\n                {countriesList.map(item => (\\\\n                    <FlagIcon\\\\n                        country={ item.iso2 }\\\\n                        mode='sprite'\\\\n                        size={ size }\\\\n                    />\\\\n                ))}\\\\n            </div>\\\\n        ))\\\\n    }\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/flag-icon\\",
            \\"documentation\\": {
              \\"path\\": \\"src/flag-icon/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/flag-icon/flag-icon.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"FlagIcon\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Код страны из [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"country\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"chunk\\"
              },
              \\"description\\": \\"Режим отображения\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mode\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"chunk\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"sprite\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление наличием тени у компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"isFlat\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`FlagIcon\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"func\\",
                      \\"structure\\": {}
                    },
                    {
                      \\"name\\": \\"string\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Form onSubmit={ () => { alert('Мы перезвоним вам в течение 5 минут'); } }>\\\\n    <FormField>\\\\n        <Input placeholder='Введите номер' />\\\\n    </FormField>\\\\n    <FormField>\\\\n        <Button view='extra' type='submit'>Отправить</Button>\\\\n    </FormField>\\\\n</Form>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/form\\",
            \\"documentation\\": {
              \\"path\\": \\"src/form/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/form/form.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Form\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"application/x-www-form-urlencoded\\"
              },
              \\"description\\": \\"Способ кодирования данных формы при их отправке\\",
              \\"isRequired\\": false,
              \\"name\\": \\"enctype\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"application/x-www-form-urlencoded\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"multipart/form-data\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"text/plain\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"/\\"
              },
              \\"description\\": \\"Адрес отправки данных на сервер\\",
              \\"isRequired\\": false,
              \\"name\\": \\"action\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"post\\"
              },
              \\"description\\": \\"Метод запроса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"method\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"post\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"get\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тип формы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"view\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"line\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"normal\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Футер для формы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"footer\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление встроенным в браузер механизмом валидации формы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"noValidate\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Управление автозаполнением формы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"autocomplete\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы формы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Имя компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик отправки формы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onSubmit\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div key={ size }>\\\\n            <FormField size={ size }>\\\\n                <Input size={ size } placeholder='Введите что-нибудь' />\\\\n            </FormField>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/form-field\\",
            \\"documentation\\": {
              \\"path\\": \\"src/form-field/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/form-field/form-field.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"FormField\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дочерние элементы \`FormField\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    <Heading size='xl'>\\\\n        Услуга по накоплению «Копилка для сдачи»\\\\n    </Heading>\\\\n    <Heading size='l'>\\\\n        Часто задаваемые вопросы\\\\n    </Heading>\\\\n    <Heading size='m'>\\\\n        Какое максимальное количество денег может перечисляться с текущего счета на накопительный?\\\\n    </Heading>\\\\n    <Heading size='s'>\\\\n        Максимальная сумма каждого перечисления\\\\n    </Heading>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/heading\\",
            \\"documentation\\": {
              \\"path\\": \\"src/heading/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/heading/heading.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Heading\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дочерние элементы \`Heading\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"xl\\"
              },
              \\"description\\": \\"Размер, определяющий какой тег заголовка будет использоваться\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    {['action-error', 'action-fail', 'action-ok', 'action-ok-filled', 'tool-close', 'tool-calendar'].map(icon => (\\\\n        <div className='row' key={ icon }>\\\\n            {['s', 'm', 'l', 'xl'].map(size => (\\\\n                <div className='column l' key={ size }>\\\\n                    <Icon\\\\n                        name={ icon }\\\\n                        size={ size }\\\\n                    />\\\\n                </div>\\\\n            ))}\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"<div>\\\\n    {['action-error', 'action-ok'].map(icon => (\\\\n        <div className='row' key={ icon }>\\\\n            {['s', 'm', 'l', 'xl'].map(size => (\\\\n                <div className='column l' key={ size }>\\\\n                    <Icon\\\\n                        name={ icon }\\\\n                        size={ size }\\\\n                        colored={ true }\\\\n                    />\\\\n                </div>\\\\n            ))}\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/icon\\",
            \\"documentation\\": {
              \\"path\\": \\"src/icon/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/icon/icon.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Icon\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление цветностью иконки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"colored\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Название иконки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер иконки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xs\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xxl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div className='row'>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <span\\\\n            key={ size }\\\\n            className='column l'\\\\n        >\\\\n            <IconButton size={ size } onClick={ () => { confirm('Подтвердите удаление') } }>\\\\n                <Icon size={ size } name='tool-close' />\\\\n            </IconButton>\\\\n        </span>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/icon-button\\",
            \\"documentation\\": {
              \\"path\\": \\"src/icon-button/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/icon-button/icon-button.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"IconButton\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"initialState = {\\\\n    money: ''\\\\n};\\\\nfunction handleMoneyChange(money) {\\\\n    setState({ money });\\\\n}\\\\nfunction renderAddons() {\\\\n    return (\\\\n        <RadioGroup type={ 'button' }>\\\\n            {['₽', '$', '€'].map(item => (\\\\n                <Radio\\\\n                    key={ item }\\\\n                    size='s'\\\\n                    type='button'\\\\n                    text={ item }\\\\n                    onChange={ handleMoneyChange }\\\\n                />\\\\n            ))}\\\\n        </RadioGroup>\\\\n    );\\\\n}\\\\n<div>\\\\n    <Input\\\\n        size='m'\\\\n        placeholder='Введите сумму'\\\\n        rightAddons={ renderAddons() }\\\\n        type='number'\\\\n    />\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const sizes = ['s', 'm', 'l', 'xl'];\\\\n<div>\\\\n    {sizes.map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <Input\\\\n                placeholder='Введите что-нибудь'\\\\n                view='line'\\\\n                size={ size }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const sizes = ['s', 'm', 'l', 'xl'];\\\\n<div>\\\\n    {sizes.map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <Input\\\\n                label='Имя'\\\\n                placeholder='Введите ваше имя'\\\\n                view='line'\\\\n                size={ size }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const sizes = ['s', 'm', 'l', 'xl'];\\\\n<div>\\\\n    {sizes.map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <Input\\\\n                placeholder='Введите что-нибудь'\\\\n                defaultValue='Корм для кота'\\\\n                clear={ true }\\\\n                view='line'\\\\n                size={ size }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const sizes = ['s', 'm', 'l', 'xl'];\\\\n<div>\\\\n    {sizes.map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <Input\\\\n                placeholder='Введите что-нибудь длинное'\\\\n                width='available'\\\\n                view='line'\\\\n                size={ size }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const sizes = ['s', 'm', 'l', 'xl'];\\\\ninitialState = {\\\\n    value: 'Конsтантин',\\\\n    error: true\\\\n};\\\\n<div>\\\\n    {sizes.map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <Input\\\\n                placeholder='Введите что-нибудь'\\\\n                error={ state.error ? 'Только кириллические символы' : null }\\\\n                view='line'\\\\n                size={ size }\\\\n                value={ state.value }\\\\n                onChange={ value => setState({\\\\n                    value,\\\\n                    error: value.search(/[a-z]/i) !== -1\\\\n                }) }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const sizes = ['s', 'm', 'l', 'xl'];\\\\n<div>\\\\n    {sizes.map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <Input\\\\n                placeholder='Введите ваше имя'\\\\n                view='line'\\\\n                size={ size }\\\\n                icon={\\\\n                    <Icon\\\\n                        colored={ true }\\\\n                        name='action-ok'\\\\n                        size={ size }\\\\n                    />\\\\n                }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const sizes = ['s', 'm', 'l', 'xl'];\\\\n<div>\\\\n    {sizes.map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <Input\\\\n                placeholder='Введите ваше имя'\\\\n                disabled={ true }\\\\n                view='line'\\\\n                size={ size }\\\\n            />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/input\\",
            \\"documentation\\": {
              \\"path\\": \\"src/input/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/input/input.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Input\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"text\\"
              },
              \\"description\\": \\"Тип поля.\\\\nВнимание, тип 'number' не умеет работать с масками, в том числе с 'selectionStart' и 'selectionEnd'.\\\\nПодробнее: http://w3c.github.io/html/sec-forms.html#does-not-apply\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"number\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"card\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"email\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"file\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"hidden\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"money\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"password\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"tel\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"text\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление возможностью компонента занимать всю ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление автозаполнением компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"autocomplete\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменения атрибута компонента (без установки класса-модификатора для оформления)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabledAttr\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменения класса-модификатора компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"focused\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Максимальное число символов\\",
              \\"isRequired\\": false,
              \\"name\\": \\"maxLength\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Иконка компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"icon\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление наличием крестика, сбрасывающего значение 'value'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"clear\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Уникальный идентификатор блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Уникальное имя блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Содержимое поля ввода\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Содержимое поля ввода, указанное по умолчанию\\",
              \\"isRequired\\": false,
              \\"name\\": \\"defaultValue\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Последовательность перехода между контролами при нажатии на Tab\\",
              \\"isRequired\\": false,
              \\"name\\": \\"tabIndex\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Определяет маску для ввода значений. [Шаблон маски](https://github.com/insin/inputmask-core#pattern)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mask\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Кастомные форматтеры символов маски, использует формат formatCharacters из \`inputmask-core\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"maskFormatCharacters\\",
              \\"type\\": {
                \\"name\\": \\"objectOf\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Стандартное ствойство HTMLInputElement 'pattern'. Может быть использовано для показа корректной клавиатуры на мобильных устройствах.\\",
              \\"isRequired\\": false,
              \\"name\\": \\"pattern\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление встроенной проверкой данных введённых пользователем в поле на корректность\\",
              \\"isRequired\\": false,
              \\"name\\": \\"formNoValidate\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Добавление дополнительных элементов к инпуту слева\\",
              \\"isRequired\\": false,
              \\"name\\": \\"leftAddons\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Добавление дополнительных элементов к инпуту справа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"rightAddons\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Лейбл для поля\\",
              \\"isRequired\\": false,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Подсказка в поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"placeholder\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Подсказка под полем\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hint\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Отображение ошибки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тултип, который появляется при наведении\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик изменения значения 'value'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса поля\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по полю\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса с поля\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по крестику сбрасываещему значение 'value'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClearClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyUp\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события вставки текста в поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onPaste\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события касания по полю\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onTouchStart\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события прекращения касания по полю\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onTouchEnd\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события перемещения при касании по полю\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onTouchMove\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события прерывания касания по полю\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onTouchCancel\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик, вызываемый перед началом ввода в маскированное поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onProcessMaskInputEvent\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const socialNetworks = [\\\\n    { value: 'Facebook' },\\\\n    { value: 'Twitter' },\\\\n    { value: 'LinkedIn' },\\\\n    { value: 'Sina Weibo' },\\\\n    { value: 'Pinterest' },\\\\n    { value: 'VKontakte' },\\\\n    { value: 'Instagram' },\\\\n    { value: 'Tumblr' },\\\\n    { value: 'Flickr' },\\\\n    { value: 'Odnoklassniki' },\\\\n    { value: 'Renren' },\\\\n    { value: 'douban' },\\\\n    { value: 'LiveJournal' },\\\\n    { value: 'DeviantArt' },\\\\n    { value: 'StumbleUpon' },\\\\n    { value: 'Myspace' },\\\\n    { value: 'Yelp, Inc.' },\\\\n    { value: 'Taringa!' },\\\\n    { value: 'mixi' },\\\\n    { value: 'XING' }\\\\n];\\\\nfunction getFilteredOptions(list, typedValue) {\\\\n    if (!typedValue) {\\\\n        return list;\\\\n    }\\\\n    return list.filter(({ value }) => value !== typedValue && value.indexOf(typedValue) !== -1);\\\\n}\\\\nfunction handleItemSelect(item) {\\\\n    setState({ value: item.text })\\\\n}\\\\nfunction handleChange(value) {\\\\n    setState({ value });\\\\n}\\\\n<div style={ { width: '300px' } }>\\\\n    <InputAutocomplete\\\\n        size='m'\\\\n        width='available'\\\\n        value={ state.value }\\\\n        onChange={ handleChange }\\\\n        onItemSelect={ handleItemSelect }\\\\n        placeholder='Введите название социальной сети'\\\\n        options={ getFilteredOptions(socialNetworks, state.value) }\\\\n    />\\\\n</div>\\"
              },
              {
                \\"code\\": \\"function Circle({ background }) {\\\\n    const circleStyles = {\\\\n        width: '14px',\\\\n        height: '14px',\\\\n        display: 'block',\\\\n        userSelect: 'none',\\\\n        background,\\\\n        borderRadius: '50%',\\\\n        transform: 'translateY(-50%)',\\\\n        top: '10px',\\\\n        position: 'relative',\\\\n        marginRight: '10px',\\\\n        marginLeft: '-20px'\\\\n    };\\\\n    return (\\\\n        <span style={ circleStyles } />\\\\n    )\\\\n}\\\\nconst socialNetworks = [\\\\n    {\\\\n        value: 'Автотранспорт',\\\\n        description:\\\\n            <Label size='l'>\\\\n                <div style={ { display: 'flex' } }>\\\\n                    <Circle background='green' />\\\\n                    Автотранспорт\\\\n                </div>\\\\n            </Label>\\\\n    },\\\\n    {\\\\n        value: 'Гипермаркет',\\\\n        description:\\\\n            <Label size='l'>\\\\n                <div style={ { display: 'flex' } }>\\\\n                    <Circle background='blue' />\\\\n                    Гипермаркет\\\\n                </div>\\\\n            </Label>\\\\n    },\\\\n    {\\\\n        value: 'Штрафы, налоги, комиссии',\\\\n        description:\\\\n            <Label size='l'>\\\\n                <div style={ { display: 'flex' } }>\\\\n                    <Circle background='rgb(217, 50, 128)' />\\\\n                    Штрафы, налоги, комиссии\\\\n                </div>\\\\n            </Label>\\\\n    }\\\\n];\\\\nfunction getFilteredOptions(list, typedValue) {\\\\n    if (!typedValue) {\\\\n        return list;\\\\n    }\\\\n    return list.filter(({ value }) => value !== typedValue && value.indexOf(typedValue) !== -1);\\\\n}\\\\nfunction handleItemSelect(item) {\\\\n    setState({ value: item.text })\\\\n}\\\\n\\\\nfunction handleChange(value) {\\\\n    setState({ value });\\\\n}\\\\n<InputAutocomplete\\\\n    size='l'\\\\n    value={ state.value }\\\\n    width='available'\\\\n    onChange={ handleChange }\\\\n    onItemSelect={ handleItemSelect }\\\\n    placeholder='Выберите категорию'\\\\n    options={ getFilteredOptions(socialNetworks, state.value) }\\\\n/>\\"
              },
              {
                \\"code\\": \\"const socialNetworks = [\\\\n    { value: 'Facebook' },\\\\n    { value: 'Twitter' },\\\\n    { value: 'LinkedIn' },\\\\n    { value: 'Sina Weibo' },\\\\n    { value: 'Pinterest' },\\\\n    { value: 'VKontakte' },\\\\n    { value: 'Instagram' },\\\\n    { value: 'Tumblr' },\\\\n    { value: 'Flickr' },\\\\n    { value: 'Odnoklassniki' },\\\\n    { value: 'Renren' },\\\\n    { value: 'douban' },\\\\n    { value: 'LiveJournal' },\\\\n    { value: 'DeviantArt' },\\\\n    { value: 'StumbleUpon' },\\\\n    { value: 'Myspace' },\\\\n    { value: 'Yelp, Inc.' },\\\\n    { value: 'Taringa!' },\\\\n    { value: 'mixi' },\\\\n    { value: 'XING' }\\\\n];\\\\nfunction getFilteredOptions(list, typedValue) {\\\\n    if (!typedValue) {\\\\n        return list;\\\\n    }\\\\n    return list.filter(({ value }) => value !== typedValue && value.indexOf(typedValue) !== -1);\\\\n}\\\\n\\\\nfunction handleItemSelect(item) {\\\\n    let values = state.values || [];\\\\n    if (!values.includes(item.value)) {\\\\n        setState({ values: values.concat([item.value]) });\\\\n    }\\\\n}\\\\n\\\\nfunction handleChange(value) {\\\\n    setState({ value });\\\\n}\\\\n\\\\n<div>\\\\n    <InputAutocomplete\\\\n        size='l'\\\\n        value={ state.value }\\\\n        width='available'\\\\n        closeOnSelect={ true }\\\\n        onChange={ handleChange }\\\\n        onItemSelect={ handleItemSelect }\\\\n        updateValueOnItemSelect={ false }\\\\n        placeholder='Выберите категорию'\\\\n        options={ getFilteredOptions(socialNetworks, state.value) }\\\\n    />\\\\n\\\\n    <div style={ { marginTop: '5px' } }>\\\\n        { state.values && state.values.map(value => <TagButton size='s'>{ value }</TagButton>) }\\\\n    </div>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/input-autocomplete\\",
            \\"documentation\\": {
              \\"path\\": \\"src/input-autocomplete/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/input-autocomplete/input-autocomplete.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"InputAutocomplete\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": []
              },
              \\"description\\": \\"Список вариантов выбора\\",
              \\"isRequired\\": false,
              \\"name\\": \\"options\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"shape\\",
                    \\"structure\\": {
                      \\"content\\": {
                        \\"name\\": \\"array\\",
                        \\"structure\\": {}
                      },
                      \\"description\\": {
                        \\"name\\": \\"node\\",
                        \\"structure\\": {}
                      },
                      \\"text\\": {
                        \\"name\\": \\"string\\",
                        \\"structure\\": {}
                      },
                      \\"type\\": {
                        \\"name\\": \\"union\\",
                        \\"structure\\": {
                          \\"elements\\": [
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"item\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"group\\"
                              }
                            }
                          ]
                        }
                      },
                      \\"value\\": {
                        \\"name\\": \\"string\\",
                        \\"structure\\": {}
                      }
                    }
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление видимостью выпадающего списка\\",
              \\"isRequired\\": false,
              \\"name\\": \\"opened\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"default\\"
              },
              \\"description\\": \\"Управление возможностью компонента занимать всю ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Ширинa выпадающего списка равна ширине инпута\\",
              \\"isRequired\\": false,
              \\"name\\": \\"equalPopupWidth\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Определяет нужно или нет обновлять значение текстового поля при выборе варианта\\",
              \\"isRequired\\": false,
              \\"name\\": \\"updateValueOnItemSelect\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": [
                  \\"bottom-left\\",
                  \\"bottom-right\\",
                  \\"top-left\\",
                  \\"top-right\\"
                ]
              },
              \\"description\\": \\"Направления, в которые может открываться попап компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"directions\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-left\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-right\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-top\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-bottom\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-top\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-bottom\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-left\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-right\\"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"description\\": \\"Обработчик выбора пункта в выпадающем меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onItemSelect\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Закрытие выпадающего списка в случае, если произошел выбор элемента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"closeOnSelect\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const inputs = [1, 2, 3, 4];\\\\n<InputGroup>\\\\n    { inputs.map(input => (\\\\n        <Input\\\\n            key={ input }\\\\n            placeholder='Укажите получателя'\\\\n        />\\\\n    )) }\\\\n</InputGroup>\\"
              },
              {
                \\"code\\": \\"const inputs = [1, 2, 3, 4];\\\\n<InputGroup width='available' >\\\\n    { inputs.map(input => (\\\\n        <Input\\\\n            key={ input }\\\\n            placeholder='Укажите получателя'\\\\n        />\\\\n    )) }\\\\n</InputGroup>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/input-group\\",
            \\"documentation\\": {
              \\"path\\": \\"src/input-group/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/input-group/input-group.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"InputGroup\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Управление возможностью компонента занимать всю ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`InputGroup\`, как правило, компоненты \`Input\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const SIZES = ['s', 'm', 'l', 'xl'];\\\\n\\\\n<div>\\\\n    {SIZES.map(size => (\\\\n        <div className='row'>\\\\n            <IntlPhoneInput size={ size } />\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/intl-phone-input\\",
            \\"documentation\\": {
              \\"path\\": \\"src/intl-phone-input/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/intl-phone-input/intl-phone-input.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"IntlPhoneInput\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"name\\": \\"size\\"
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"+7\\"
              },
              \\"name\\": \\"value\\"
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/isolated-container\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/isolated-container/isolated-container.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"IsolatedContainer\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const elipsisBoxStyles = {\\\\n    width: '200px',\\\\n    overflow: 'hidden',\\\\n    textOverflow: 'ellipsis'\\\\n};\\\\n\\\\n<div>\\\\n    {['l'].map(size => (\\\\n        <div key={ size }>\\\\n            <div style={ elipsisBoxStyles }>\\\\n                <Label size={ size } isNoWrap={ true }>\\\\n                    Гипермаркет\\\\n                </Label>\\\\n            </div>\\\\n            <div style={ elipsisBoxStyles }>\\\\n                <Label size={ size } isNoWrap={ true }>\\\\n                    Путешествие\\\\n                </Label>\\\\n            </div>\\\\n            <div style={ elipsisBoxStyles }>\\\\n                <Label size={ size } isNoWrap={ true }>\\\\n                    Мобильная связь, интернет, ТВ, телефон\\\\n                </Label>\\\\n            </div>\\\\n            <div style={ elipsisBoxStyles }>\\\\n                <Label size={ size } isNoWrap={ true }>\\\\n                    Кафе и рестораны\\\\n                </Label>\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/label\\",
            \\"documentation\\": {
              \\"path\\": \\"src/label/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/label/label.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Label\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Label\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление возможностью рендерить компонент в одну сроку\\",
              \\"isRequired\\": false,
              \\"name\\": \\"isNoWrap\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <span className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <Link\\\\n                    text='Вернуться в интернет-банк'\\\\n                    size={ size }\\\\n                />\\\\n            </div>\\\\n        </span>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <span className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <Link\\\\n                    text='Показать больше'\\\\n                    size={ size }\\\\n                    pseudo={ true }\\\\n                />\\\\n            </div>\\\\n        </span>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const columnStyle = {\\\\n    justifyContent: 'center',\\\\n    display: 'flex',\\\\n    width: '50%'\\\\n};\\\\n<div style={ { width: '100%' } }>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <span className='row' key={ size }>\\\\n            <div className='column' style={ columnStyle }>\\\\n                <Link size={ size } ><span role='img' aria-label='smile'>😊</span></Link>\\\\n            </div>\\\\n            <div className='column' style={ columnStyle }>\\\\n\\\\n                <Link size={ size } >¯\\\\\\\\_(ツ)_/¯</Link>\\\\n            </div>\\\\n        </span>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/link\\",
            \\"documentation\\": {
              \\"path\\": \\"src/link/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/link/link.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Link\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Иконка ссылки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"icon\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"left\\"
              },
              \\"description\\": \\"Позиционирование иконки в ссылке\\",
              \\"isRequired\\": false,
              \\"name\\": \\"iconPosition\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"left\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"right\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Текст ссылки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"text\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"#\\"
              },
              \\"description\\": \\"href ссылки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"url\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"target ссылки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"target\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"_self\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"_blank\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"_parent\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"_top\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": 0
              },
              \\"description\\": \\"Последовательность перехода между контролами при нажатии на Tab\\",
              \\"isRequired\\": false,
              \\"name\\": \\"tabIndex\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление возможностью клика по ссылке\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление состоянием ссылки выбран/не выбран\\",
              \\"isRequired\\": false,
              \\"name\\": \\"checked\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Псевдо-ссылка (border-bottom: dashed)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"pseudo\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xs\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Link\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика но ссылке\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на ссылку\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с ссылки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const ITEMS_OL = [\\\\n    {\\\\n        key: 'one',\\\\n        value: 'Накопительные счета'\\\\n    },\\\\n    {\\\\n        key: 'two',\\\\n        value: 'Депозиты'\\\\n    },\\\\n    {\\\\n        key: 'three',\\\\n        value: 'Бесплатные сервисы для накоплений'\\\\n    }\\\\n];\\\\n\\\\n<List\\\\n    items={ ITEMS_OL }\\\\n/>\\"
              },
              {
                \\"code\\": \\"const ITEMS_UL = [\\\\n    {\\\\n        key: 'one',\\\\n        value: 'Индивидуальное обслуживание в любом отделении в России'\\\\n    },\\\\n    {\\\\n        key: 'two',\\\\n        value: 'Повышенные % ставки по депозитам'\\\\n    },\\\\n    {\\\\n        key: 'three',\\\\n        value: 'Льготная конвертация валют.'\\\\n    }\\\\n];\\\\n<List\\\\n    items={ ITEMS_UL }\\\\n    type='ordered'\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/list\\",
            \\"documentation\\": {
              \\"path\\": \\"src/list/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/list/list.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"List\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Список элементов\\",
              \\"isRequired\\": false,
              \\"name\\": \\"items\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"shape\\",
                    \\"structure\\": {
                      \\"key\\": {
                        \\"name\\": \\"string\\",
                        \\"structure\\": {}
                      },
                      \\"value\\": {
                        \\"name\\": \\"node\\",
                        \\"structure\\": {}
                      }
                    }
                  }
                }
              }
            },
            {
              \\"description\\": \\"Тип списка\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"ordered\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/masked-input\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/masked-input/masked-input.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"MaskedInput\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Маска для поля ввода, использует формат https://github.com/insin/inputmask-core\\",
              \\"isRequired\\": true,
              \\"name\\": \\"mask\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Кастомные форматтеры символов маски, использует формат formatCharacters из \`inputmask-core\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"formatCharacters\\",
              \\"type\\": {
                \\"name\\": \\"objectOf\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Максимальное число символов\\",
              \\"isRequired\\": false,
              \\"name\\": \\"maxLength\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик, вызываемый перед началом ввода в поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onProcessInputEvent\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const MENU_1 = [\\\\n    {\\\\n        type: 'item',\\\\n        content: 'Тарифы',\\\\n        value: 'value1',\\\\n        props: {\\\\n            url: '#1',\\\\n            view: 'underlined'\\\\n        }\\\\n    },\\\\n    {\\\\n        type: 'item',\\\\n        content: 'Депозиты',\\\\n        value: 'value2',\\\\n        props: {\\\\n            url: '#2',\\\\n            view: 'underlined'\\\\n        }\\\\n    },\\\\n    {\\\\n        type: 'item',\\\\n        content: 'Овердрафты',\\\\n        value: 'value3',\\\\n        props: {\\\\n            url: '#3',\\\\n            disabled: true,\\\\n            view: 'underlined'\\\\n        }\\\\n    }\\\\n];\\\\n\\\\nconst MENU_2 = [\\\\n    {\\\\n        type: 'item',\\\\n        content: 'Компании',\\\\n        value: '1',\\\\n        props: {\\\\n            url: '#1'\\\\n        }\\\\n    },\\\\n    {\\\\n        type: 'group',\\\\n        title: 'Платежи и переводы',\\\\n        content: [\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Новый платёж',\\\\n                value: '2',\\\\n                props: {\\\\n                    url: '#2'\\\\n                }\\\\n            },\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Платежи в работе',\\\\n                value: '3',\\\\n                props: {\\\\n                    url: '#3'\\\\n                }\\\\n            }\\\\n        ]\\\\n    },\\\\n    {\\\\n        type: 'group',\\\\n        title: 'Текущая деятельность',\\\\n        content: [\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Счета и депозиты',\\\\n                value: '4',\\\\n                props: {\\\\n                    url: '#4'\\\\n                }\\\\n            },\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Депозиты',\\\\n                value: '5',\\\\n                props: {\\\\n                    url: '#5',\\\\n                    type: 'dropdown',\\\\n                    popup: 'Popup Menu'\\\\n                }\\\\n            }\\\\n        ]\\\\n    }\\\\n];\\\\n\\\\nconst MENU_3 = [\\\\n    {\\\\n        type: 'group',\\\\n        title: ' ',\\\\n        content: [\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Москва',\\\\n                value: 'moscow'\\\\n            },\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Санкт-Петербург',\\\\n                value: 'peterburg'\\\\n            }\\\\n        ]\\\\n    },\\\\n    {\\\\n        type: 'group',\\\\n        title: 'А',\\\\n        content: [\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Абакан',\\\\n                value: 'abakan'\\\\n            },\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Альметьевск',\\\\n                value: 'almetyevsk'\\\\n            },\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Ангарск',\\\\n                value: 'angarsk'\\\\n            }\\\\n        ]\\\\n    },\\\\n    {\\\\n        type: 'group',\\\\n        title: 'Б',\\\\n        content: [\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Балашиха',\\\\n                value: 'balashiha'\\\\n            },\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Барнаул',\\\\n                value: 'barnaul'\\\\n            },\\\\n            {\\\\n                type: 'item',\\\\n                content: 'Белгород',\\\\n                value: 'belgorod'\\\\n            }\\\\n        ]\\\\n    }\\\\n];\\\\n\\\\n<div>\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Базовое горизонтальное меню\\\\n            </Heading>\\\\n            <Menu\\\\n                view='horizontal'\\\\n                content={ MENU_1 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Базовое вертикальное меню\\\\n            </Heading>\\\\n            <Menu\\\\n                content={ MENU_2 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Вертикальное меню с короткими заголовками групп\\\\n            </Heading>\\\\n            <Menu\\\\n                groupView='line'\\\\n                content={ MENU_3 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Горизонтальное меню с множественным выбором mode check\\\\n            </Heading>\\\\n            <Menu\\\\n                mode='check'\\\\n                view='horizontal'\\\\n                content={ MENU_1 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Вертикальное меню с множественным выбором mode check\\\\n            </Heading>\\\\n            <Menu\\\\n                mode='check'\\\\n                content={ MENU_1 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Горизонтальное меню с одиночным обязательным выбором mode radio\\\\n            </Heading>\\\\n            <Menu\\\\n                mode='radio'\\\\n                view='horizontal'\\\\n                content={ MENU_1 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Вертикальное меню с одиночным обязательным выбором mode radio\\\\n            </Heading>\\\\n            <Menu\\\\n                mode='radio'\\\\n                content={ MENU_1 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Горизонтальное меню с одиночным необязательным выбором mode radio-check\\\\n            </Heading>\\\\n            <Menu\\\\n                mode='radio-check'\\\\n                view='horizontal'\\\\n                content={ MENU_1 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Вертикальное меню с одиночным необязательным выбором mode radio-check\\\\n            </Heading>\\\\n            <Menu\\\\n                mode='radio-check'\\\\n                content={ MENU_1 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n\\\\n    <div className='row'>\\\\n        <div className='column'>\\\\n            <Heading size='s'>\\\\n                Неактивное меню\\\\n            </Heading>\\\\n            <Menu\\\\n                mode='check'\\\\n                view='horizontal'\\\\n                disabled={ true }\\\\n                checkedItems={ ['value1', 'value3'] }\\\\n                content={ MENU_1 }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/menu\\",
            \\"documentation\\": {
              \\"path\\": \\"src/menu/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/menu/menu.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Menu\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Тип расположения меню: 'horizontal'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"view\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"default\\"
              },
              \\"description\\": \\"Размещение заголовка групп: обычное или в одну строку с первым элементом группы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"groupView\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"line\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"basic\\"
              },
              \\"description\\": \\"Тип списка вариантов меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mode\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"basic\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"check\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"radio\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"radio-check\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменения значения\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление состоянием фокуса элемента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"focused\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление автоматическим фокусом на первом элементе при вызове публичного метода focus\\",
              \\"isRequired\\": false,
              \\"name\\": \\"autoFocusFirstItem\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Элемент меню, на котором стоит выделение\\",
              \\"isRequired\\": false,
              \\"name\\": \\"highlightedItem\\",
              \\"type\\": {
                \\"name\\": \\"shape\\",
                \\"structure\\": {
                  \\"item\\": {
                    \\"name\\": \\"any\\",
                    \\"structure\\": {}
                  },
                  \\"ref\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"number\\",
                          \\"structure\\": {}
                        },
                        {
                          \\"name\\": \\"string\\",
                          \\"structure\\": {}
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"description\\": \\"Список объектов ContentItem\\",
              \\"isRequired\\": false,
              \\"name\\": \\"content\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"shape\\",
                    \\"structure\\": {
                      \\"content\\": {
                        \\"name\\": \\"union\\",
                        \\"structure\\": {
                          \\"elements\\": [
                            {
                              \\"name\\": \\"node\\",
                              \\"structure\\": {}
                            },
                            {
                              \\"name\\": \\"array\\",
                              \\"structure\\": {}
                            }
                          ]
                        }
                      },
                      \\"props\\": {
                        \\"name\\": \\"object\\",
                        \\"structure\\": {}
                      },
                      \\"type\\": {
                        \\"name\\": \\"union\\",
                        \\"structure\\": {
                          \\"elements\\": [
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"item\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"group\\"
                              }
                            }
                          ]
                        }
                      },
                      \\"value\\": {
                        \\"name\\": \\"union\\",
                        \\"structure\\": {
                          \\"elements\\": [
                            {
                              \\"name\\": \\"string\\",
                              \\"structure\\": {}
                            },
                            {
                              \\"name\\": \\"number\\",
                              \\"structure\\": {}
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              \\"description\\": \\"Список значений выбранных элементов\\",
              \\"isRequired\\": false,
              \\"name\\": \\"checkedItems\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"string\\",
                          \\"structure\\": {}
                        },
                        {
                          \\"name\\": \\"number\\",
                          \\"structure\\": {}
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Объект со стилями\\",
              \\"isRequired\\": false,
              \\"name\\": \\"style\\",
              \\"type\\": {
                \\"name\\": \\"custom\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по варианту меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onItemClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик выбора варианта меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onItemCheck\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyUp\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события выделения элемента меню, принимает на вход переменную типа HighlightedItem\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onHighlightItem\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const layoutStyle = {\\\\n    paddingRight: '10px'\\\\n};\\\\n<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <span style={ layoutStyle } key={ size }>\\\\n            <MenuItem\\\\n                size={ size }\\\\n                type={ 'dropdown' }\\\\n                popup='Информация о тарифах'\\\\n            >\\\\n                Тарифы\\\\n            </MenuItem>\\\\n        </span>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const layoutStyle = {\\\\n    paddingRight: '10px'\\\\n};\\\\n<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <span style={ layoutStyle } key={ size }>\\\\n            <MenuItem\\\\n                size={ size }\\\\n                type={ 'block' }\\\\n            >\\\\n                Депозиты\\\\n            </MenuItem>\\\\n        </span>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const layoutStyle = {\\\\n    paddingRight: '10px'\\\\n};\\\\n<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <span style={ layoutStyle } key={ size }>\\\\n            <MenuItem\\\\n                size={ size }\\\\n                type={ 'link' }\\\\n            >\\\\n                Овердрафты\\\\n            </MenuItem>\\\\n        </span>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/menu-item\\",
            \\"documentation\\": {
              \\"path\\": \\"src/menu-item/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/menu-item/menu-item.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"MenuItem\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"link\\"
              },
              \\"description\\": \\"Тип элемента меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"link\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"dropdown\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"block\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"plain\\"
              },
              \\"description\\": \\"Тип ссылки, для компонента с type='link'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"view\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"plain\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"underlined\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"pseudo\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"href ссылки, для компонента с type='link'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"url\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"target для ссылки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"target\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"_self\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"_blank\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"_parent\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"_top\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Уникальное значение элемента. Для использования в Menu\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"string\\",
                      \\"structure\\": {}
                    },
                    {
                      \\"name\\": \\"number\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Попап для компонента с type='dropdown'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"popup\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление возможностью выбирать данный компонент\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление состоянием выбран/не выбран компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"checked\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление видимостью компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hidden\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление визуальным выделением компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hovered\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`MenuItem\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Только для type='link', обработчик клика по компоненту\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на элемент меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с элемента меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"initialState = {\\\\n    money: ''\\\\n};\\\\nfunction handleMoneyChange(money) {\\\\n    setState({ money });\\\\n}\\\\n<MoneyInput value={ state.money } onChange={ handleMoneyChange } />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/money-input\\",
            \\"documentation\\": {
              \\"path\\": \\"src/money-input/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/money-input/money-input.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"MoneyInput\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": 9
              },
              \\"description\\": \\"Максимально допустимая длина значения до запятой\\",
              \\"isRequired\\": false,
              \\"name\\": \\"integerLength\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": 2
              },
              \\"description\\": \\"Максимально допустимая длина значения после запятой\\",
              \\"isRequired\\": false,
              \\"name\\": \\"fractionLength\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/mq\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/mq/mq.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Mq\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Медиа запрос\\",
              \\"isRequired\\": false,
              \\"name\\": \\"query\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Запрос на поддержку тач-событий\\",
              \\"isRequired\\": false,
              \\"name\\": \\"touch\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Mq\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик изменений в совпадении запросов\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMatchChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"initialState = {\\\\n    visible: false\\\\n};\\\\n<div>\\\\n    <Button onClick={ () => setState({ visible: !state.visible }) }>\\\\n        Отправить платёж\\\\n    </Button>\\\\n    <Notification\\\\n        visible={ state.visible }\\\\n        status='ok'\\\\n        offset={ 10 }\\\\n        title={ 'Платёж отправлен' }\\\\n        onCloseTimeout={ () => { setState({ visible: false }); } }\\\\n        onCloserClick={ () => { setState({ visible: false }); } }\\\\n    >\\\\n        Платёж на сумму 150 000 ₽ для ИП Фридман М.М. отправлен\\\\n    </Notification>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"initialState = {\\\\n    visible: false\\\\n};\\\\n<div>\\\\n    <Button onClick={ () => setState({ visible: !state.visible }) }>\\\\n        Отправить платёж\\\\n    </Button>\\\\n    <Notification\\\\n        visible={ state.visible }\\\\n        status='fail'\\\\n        offset={ 10 }\\\\n        stickTo='right'\\\\n        title={ 'Платёж отправлен' }\\\\n        onCloseTimeout={ () => { setState({ visible: false }); } }\\\\n        onCloserClick={ () => { setState({ visible: false }); } }\\\\n    >\\\\n        Платёж на сумму 150 000 ₽ для ИП Фридман М.М. отправлен\\\\n    </Notification>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"initialState = {\\\\n    visible: false\\\\n};\\\\n<div>\\\\n    <Button onClick={ () => setState({ visible: !state.visible }) }>\\\\n        Повторить платёж\\\\n    </Button>\\\\n    <Notification\\\\n        visible={ state.visible }\\\\n        status='error'\\\\n        offset={ 100 }\\\\n        stickTo='right'\\\\n        title={ 'Недостаточно средств' }\\\\n        onCloseTimeout={ () => { setState({ visible: false }); } }\\\\n        onCloserClick={ () => { setState({ visible: false }); } }\\\\n    >\\\\n        Не хватает 9 ₽, чтобы отправить платёж на сумму 150 000 ₽ для ИП Фридман М.М.\\\\n    </Notification>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"initialState = {\\\\n    visible: false\\\\n};\\\\n<div>\\\\n    <Button onClick={ () => setState({ visible: !state.visible }) }>\\\\n        Отправить позже\\\\n    </Button>\\\\n    <Notification\\\\n        visible={ state.visible }\\\\n        status='ok'\\\\n        offset={ 100 }\\\\n        title={ 'Платёж запланирован' }\\\\n        icon={ <Icon name='tool-calendar' size='m' /> }\\\\n        onCloseTimeout={ () => { setState({ visible: false }); } }\\\\n        onCloserClick={ () => { setState({ visible: false }); } }\\\\n    >\\\\n        Платёж будет отправлен 31 февраля 2018 года\\\\n    </Notification>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"initialState = {\\\\n    visible: false\\\\n};\\\\n<div>\\\\n    <Button onClick={ () => setState({ visible: !state.visible }) }>\\\\n        Сохранить как черновик\\\\n    </Button>\\\\n    <Notification\\\\n        visible={ state.visible }\\\\n        status='ok'\\\\n        offset={ 190 }\\\\n        title={ 'Черновик сохранен' }\\\\n        onClickOutside={ () => { setState({ visible: false }); } }\\\\n    >\\\\n        Можно вернуться к редактированию черновика позже\\\\n    </Notification>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/notification\\",
            \\"documentation\\": {
              \\"path\\": \\"src/notification/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/notification/notification.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Notification\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Тип компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"status\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"error\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"fail\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"ok\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление видимостью компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"visible\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": 0
              },
              \\"description\\": \\"Отступ от верхнего края\\",
              \\"isRequired\\": false,
              \\"name\\": \\"offset\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"left\\"
              },
              \\"description\\": \\"К какому краю прижат попап\\",
              \\"isRequired\\": false,
              \\"name\\": \\"stickTo\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"left\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"right\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Управляет отображением кнопки закрытия уведомления\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hasCloser\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Notification\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Заголовок сообщения\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Замена стандартной иконки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"icon\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": 5000
              },
              \\"description\\": \\"Время до закрытия компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"autoCloseDelay\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события истечения времени до закрытия компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onCloseTimeout\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по крестику компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onCloserClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на попап\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика вне компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClickOutside\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по компоненту\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    <div className='row' >\\\\n        <Paragraph view='normal'>\\\\n            Компания Google проанализировала поисковые запросы и выяснила, какие банковские услуги и\\\\n            продукты наиболее востребованы среди пользователей Рунета,\\\\n            а также как менялись маркетинговые стратегии банков за последние 2 года.\\\\n            Исследование отражает сравнительные данные за 2014 – 2015 год, а также тенденции начала 2016 года.\\\\n        </Paragraph>\\\\n    </div>\\\\n    <div className='row' >\\\\n        <Paragraph view='lead'>\\\\n            Компания Google проанализировала поисковые запросы и выяснила, какие банковские услуги и\\\\n            продукты наиболее востребованы среди пользователей Рунета,\\\\n            а также как менялись маркетинговые стратегии банков за последние 2 года.\\\\n            Исследование отражает сравнительные данные за 2014 – 2015 год, а также тенденции начала 2016 года.\\\\n        </Paragraph>\\\\n    </div>\\\\n    <div className='lead' >\\\\n        <Paragraph view='normal' mark='+'>\\\\n            Компания Google проанализировала поисковые запросы и выяснила, какие банковские услуги и\\\\n            продукты наиболее востребованы среди пользователей Рунета,\\\\n            а также как менялись маркетинговые стратегии банков за последние 2 года.\\\\n            Исследование отражает сравнительные данные за 2014 – 2015 год, а также тенденции начала 2016 года.\\\\n        </Paragraph>\\\\n    </div>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/paragraph\\",
            \\"documentation\\": {
              \\"path\\": \\"src/paragraph/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/paragraph/paragraph.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Paragraph\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Тип параграфа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"view\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"lead\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"normal\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Маркер параграфа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mark\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Paragraph\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<PhoneInput placeholder='+7 000 000 00 00' />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/phone-input\\",
            \\"documentation\\": {
              \\"path\\": \\"src/phone-input/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/phone-input/phone-input.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"PhoneInput\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"+1 111 111 11 11\\"
              },
              \\"description\\": \\"Определяет маску для ввода значений. [Шаблон маски](https://github.com/insin/inputmask-core#pattern)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mask\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"+7 000 000 00 00\\"
              },
              \\"description\\": \\"Подсказка в текстовом поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"placeholder\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Plate\\\\n    hasCloser={ true }\\\\n>\\\\n    <Heading size='s'>\\\\n        Альфа-Мобайл 9.0\\\\n    </Heading>\\\\n    <Paragraph>\\\\n        Новый, превосходный, невероятный, беспрецедентный, большой, внушительный, четкий, безотказный, волшебный, понятный. +40 новых возможностей твоего мобайла!\\\\n    </Paragraph>\\\\n</Plate>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/plate\\",
            \\"documentation\\": {
              \\"path\\": \\"src/plate/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/plate/plate.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Plate\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление наличием закрывающего крестика\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hasCloser\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Плоская тема\\",
              \\"isRequired\\": false,
              \\"name\\": \\"isFlat\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Plate\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по плашке\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по крестику\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onCloserClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"class PopupDemo extends React.Component {\\\\n    constructor() {\\\\n        super();\\\\n        this.state = {\\\\n            popup1: false,\\\\n            popup2: false,\\\\n            popup3: false,\\\\n            popup4: false,\\\\n            popup5: false,\\\\n            popup6: false,\\\\n            popup7: false\\\\n        };\\\\n\\\\n        this.popup1;\\\\n        this.popup2;\\\\n        this.popup3;\\\\n        this.popup4;\\\\n        this.popup5;\\\\n        this.popup6;\\\\n        this.popup7;\\\\n\\\\n        this.target1;\\\\n        this.target2;\\\\n        this.target3;\\\\n        this.target4;\\\\n        this.target5;\\\\n        this.target6;\\\\n        this.target7;\\\\n    }\\\\n\\\\n    componentDidMount() {\\\\n        this.popup1.setTarget(this.target1.control);\\\\n        this.popup2.setTarget(this.target2.control);\\\\n        this.popup3.setTarget(this.target3.control);\\\\n        this.popup4.setTarget(this.target4.control);\\\\n        this.popup5.setTarget(this.target5.control);\\\\n        this.popup7.setTarget(this.target7.control);\\\\n    }\\\\n\\\\n    render() {\\\\n        return (\\\\n            <div>\\\\n                <div className='row'>\\\\n                    <Button\\\\n                        ref={ (target) => { this.target1 = target; } }\\\\n                        size='s'\\\\n                        onClick={ () => { this.setState({ popup1: !this.state.popup1 }); } }\\\\n                    >\\\\n                        Перейти на тариф\\\\n                    </Button>\\\\n                    <Popup\\\\n                        ref={ (popup) => { this.popup1 = popup; } }\\\\n                        directions={ ['top-center', 'bottom-center'] }\\\\n                        size='s'\\\\n                        type='tooltip'\\\\n                        visible={ this.state.popup1 }\\\\n                    >\\\\n                        Переход на этот тариф бесплатен\\\\n                    </Popup>\\\\n                </div>\\\\n                <div className='row'>\\\\n                    <Button\\\\n                        ref={ (target) => { this.target2 = target; } }\\\\n                        size='l'\\\\n                        onMouseEnter={ () => { this.setState({ popup2: true }); } }\\\\n                        onMouseLeave={ () => { this.setState({ popup2: false }); } }\\\\n                    >\\\\n                        Сколько стоит?\\\\n                    </Button>\\\\n                    <Popup\\\\n                        ref={ (popup) => { this.popup2 = popup; } }\\\\n                        directions={ ['right-center', 'right-top', 'right-bottom'] }\\\\n                        size='l'\\\\n                        mainOffset={ 0 }\\\\n                        type='tooltip'\\\\n                        visible={ this.state.popup2 }\\\\n                        onMouseLeave={ () => { this.setState({ popup2: false }); } }\\\\n                        onMouseEnter={ () => { this.setState({ popup2: true }); } }\\\\n                    >\\\\n                        2 400 ₽ в месяц при оплате за год\\\\n                    </Popup>\\\\n                </div>\\\\n                <div className='row'>\\\\n                    <Button\\\\n                        ref={ (target) => { this.target3 = target; } }\\\\n                        size='m'\\\\n                        onMouseEnter={ () => { this.setState({ popup3: true }); } }\\\\n                        onMouseLeave={ () => { this.setState({ popup3: false }); } }\\\\n                    >\\\\n                        Облачные бухгалтерии\\\\n                    </Button>\\\\n                    <Popup\\\\n                        ref={ (popup) => { this.popup3 = popup; } }\\\\n                        height='available'\\\\n                        visible={ this.state.popup3 }\\\\n                        onMouseLeave={ () => { this.setState({ popup3: false }); } }\\\\n                        onMouseEnter={ () => { this.setState({ popup3: true }); } }\\\\n                    >\\\\n                        <Paragraph view='normal'>\\\\n                            В настоящий момент в системе «Альфа-Бизнес Онлайн» реализована интеграция с облачными бухгалтериями <Link url='http://www.moedelo.org' text='«Мое дело»' />, <Link url='http://www.e-kontur.ru' text=' «Бухгалтерия.Контур»' /> и <Link url='http://www.b2b-center.ru/' text='«B2B-Center»' />. При подключении интеграции в Альфа-Бизнес Онлайн у сервисов «Мое дело», «Бухгалтерия.Контур», «B2B-Center» появится возможность автоматически создавать в Альфа-Бизнес Онлайн неподписанные платежные поручения и подгружать из «Альфа-Бизнес Онлайн» информацию о движениях по счетам. Уполномоченное лицо может подключить один аккаунт сервиса «Бухгалтерия.Контур» и (или) один аккаунт сервиса «Мое дело» только к одному Клиенту.\\\\n                        </Paragraph>\\\\n                    </Popup>\\\\n                </div>\\\\n                <div className='row'>\\\\n                    <Button\\\\n                        ref={ (target) => { this.target4 = target; } }\\\\n                        size='m'\\\\n                        onMouseEnter={ () => { this.setState({ popup4: true }); } }\\\\n                        onMouseLeave={ () => { this.setState({ popup4: false }); } }\\\\n                    >\\\\n                        Облачные бухгалтерии\\\\n                    </Button>\\\\n                    <Popup\\\\n                        ref={ (ref) => { this.popup4 = ref; } }\\\\n                        height='available'\\\\n                        directions={ ['right-center', 'right-top', 'right-bottom'] }\\\\n                        visible={ this.state.popup4 }\\\\n                        onMouseLeave={ () => { this.setState({ popup4: false }); } }\\\\n                        onMouseEnter={ () => { this.setState({ popup4: true }); } }\\\\n                    >\\\\n                        <Paragraph view='normal'>\\\\n                            В настоящий момент в системе «Альфа-Бизнес Онлайн» реализована интеграция с облачными бухгалтериями <Link url='http://www.moedelo.org' text='«Мое дело»' />, <Link url='http://www.e-kontur.ru' text='«Бухгалтерия.Контур»' /> и <Link url='http://www.b2b-center.ru/' text='«B2B-Center»' />. При подключении интеграции в Альфа-Бизнес Онлайн у сервисов «Мое дело», «Бухгалтерия.Контур», «B2B-Center» появится возможность автоматически создавать в Альфа-Бизнес Онлайн неподписанные платежные поручения и подгружать из «Альфа-Бизнес Онлайн» информацию о движениях по счетам. Уполномоченное лицо может подключить один аккаунт сервиса «Бухгалтерия.Контур» и (или) один аккаунт сервиса «Мое дело» только к одному Клиенту.\\\\n                        </Paragraph>\\\\n                    </Popup>\\\\n                </div>\\\\n                <div className='row'>\\\\n                    <Button\\\\n                        ref={ (target) => { this.target5 = target; } }\\\\n                        size='m'\\\\n                        onClick={ () => { this.setState({ popup5: !this.state.popup5 }); } }\\\\n                    >\\\\n                        Сколько стоит?\\\\n                    </Button>\\\\n                    <Popup\\\\n                        ref={ (popup) => { this.popup5 = popup; } }\\\\n                        visible={ this.state.popup5 }\\\\n                        onClickOutside={ () => { this.setState({ popup5: false }); } }\\\\n                    >\\\\n                        { '2 400 ₽ в месяц при оплате за год' }\\\\n                    </Popup>\\\\n                </div>\\\\n                <div className='row'>\\\\n                    <Button\\\\n                        ref={ (target) => { this.target6 = target; } }\\\\n                        size='m'\\\\n                        onClick={ () => { this.setState({ popup6: !this.state.popup6 }); } }\\\\n                    >\\\\n                        Облачные бухгалтерии\\\\n                    </Button>\\\\n                    <Popup\\\\n                        ref={ (popup) => { this.popup6 = popup; } }\\\\n                        target='screen'\\\\n                        visible={ this.state.popup6 }\\\\n                    >\\\\n                        <Paragraph view='normal'>\\\\n                            В настоящий момент в системе «Альфа-Бизнес Онлайн» реализована интеграция с облачными бухгалтериями <Link url='http://www.moedelo.org' text='«Мое дело»' />, <Link url='http://www.e-kontur.ru' text='«Бухгалтерия.Контур»' /> и <Link url='http://www.b2b-center.ru/' text='«B2B-Center»' />. При подключении интеграции в Альфа-Бизнес Онлайн у сервисов «Мое дело», «Бухгалтерия.Контур», «B2B-Center» появится возможность автоматически создавать в Альфа-Бизнес Онлайн неподписанные платежные поручения и подгружать из «Альфа-Бизнес Онлайн» информацию о движениях по счетам. Уполномоченное лицо может подключить один аккаунт сервиса «Бухгалтерия.Контур» и (или) один аккаунт сервиса «Мое дело» только к одному Клиенту.\\\\n                        </Paragraph>\\\\n                        <Button\\\\n                            size='m'\\\\n                            onClick={ () => { this.setState({ popup6: false }); } }\\\\n                        >\\\\n                            Ясно\\\\n                        </Button>\\\\n                    </Popup>\\\\n                </div>\\\\n                <div className='row'>\\\\n                    <Button\\\\n                        ref={ (target) => { this.target7 = target; } }\\\\n                        size='m'\\\\n                        onClick={ () => { this.setState({ popup7: !this.state.popup7 }); } }\\\\n                    >\\\\n                        Сколько стоит\\\\n                    </Button>\\\\n                    <Popup\\\\n                        ref={ (popup) => { this.popup7 = popup; } }\\\\n                        padded={ true }\\\\n                        visible={ this.state.popup7 }\\\\n                        header={\\\\n                            <Heading size='s'>При оплате за год</Heading>\\\\n                        }\\\\n                        onClickOutside={ () => { this.setState({ popup7: false }); } }\\\\n                    >\\\\n                        { '2 400 ₽ в месяц' }\\\\n                    </Popup>\\\\n                </div>\\\\n            </div>\\\\n        );\\\\n    }\\\\n}\\\\n\\\\n<PopupDemo />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/popup\\",
            \\"documentation\\": {
              \\"path\\": \\"src/popup/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/popup/popup.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Popup\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`Popup\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тип попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"tooltip\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Подстраивание высоты попапа под край окна ('adaptive'), занятие попапом всей возможной высоты ('available'), 'default'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"height\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"adaptive\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Только для target='anchor', расположение (в порядке приоритета) относительно точки открытия. Первым указывается главное направление, через дефис - второстепенное направление\\",
              \\"isRequired\\": false,
              \\"name\\": \\"directions\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"anchor\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-left\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-right\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-top\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-bottom\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-top\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-bottom\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-left\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-right\\"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"anchor\\"
              },
              \\"description\\": \\"Привязка компонента к другому элементу на странице, или его расположение независимо от остальных: 'anchor', 'position', 'screen'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"target\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"anchor\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"position\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"screen\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Только для target='anchor'. Смещение в пикселях всплывающего окна относительно основного направления\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mainOffset\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": 0
              },
              \\"description\\": \\"Только для target='anchor'. Смещение в пикселях всплывающего окна относительно второстепенного направления\\",
              \\"isRequired\\": false,
              \\"name\\": \\"secondaryOffset\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": 0
              },
              \\"description\\": \\"Только для target='anchor'. Минимально допустимое смещение в пикселях всплывающего окна от края его контейнера\\",
              \\"isRequired\\": false,
              \\"name\\": \\"fitContaiterOffset\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление видимостью компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"visible\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Управление выставлением модификатора для добавления внутренних отступов в стилях\\",
              \\"isRequired\\": false,
              \\"name\\": \\"padded\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Элемент закреплённого заголовка для компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"header\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"s\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на попап\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика вне компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClickOutside\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Минимальная ширина попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"minWidth\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Максимальная ширина попапа\\",
              \\"isRequired\\": false,
              \\"name\\": \\"maxWidth\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Указатель на родительский элемент\\",
              \\"isRequired\\": false,
              \\"name\\": \\"for\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/popup-container-provider\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/popup-container-provider/popup-container-provider.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"PopupContainerProvider\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дочерние элементы контейнера\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Объект со стилями\\",
              \\"isRequired\\": false,
              \\"name\\": \\"style\\",
              \\"type\\": {
                \\"name\\": \\"custom\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/popup-header\\",
            \\"documentation\\": {
              \\"path\\": \\"src/popup-header/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/popup-header/popup-header.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"PopupHeader\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Содержимое заголовка\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по кнопке закрытия\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onCloserClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const progress = 50;\\\\n\\\\n<div>\\\\n    <ProgressBar percent={ progress } />\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/progress-bar\\",
            \\"documentation\\": {
              \\"path\\": \\"src/progress-bar/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/progress-bar/progress-bar.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"ProgressBar\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": 0
              },
              \\"description\\": \\"Прогресс в процентах\\",
              \\"isRequired\\": false,
              \\"name\\": \\"percent\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const radioStyle = {\\\\n    margin: '10px'\\\\n};\\\\n<div>\\\\n    <div>\\\\n        {['m', 'l'].map(size => (\\\\n            <span style={ radioStyle } key={ size }>\\\\n                <Radio\\\\n                    text='Текущий счёт'\\\\n                    size={ size }\\\\n                />\\\\n            </span>\\\\n        ))}\\\\n    </div>\\\\n    <div>\\\\n        {['m', 'l'].map(size => (\\\\n            <span style={ radioStyle } key={ size }>\\\\n                <Radio\\\\n                    text='Основной счёт'\\\\n                    size={ size }\\\\n                    error={ true }\\\\n                />\\\\n            </span>\\\\n        ))}\\\\n    </div>\\\\n    <div>\\\\n        {['m', 'l'].map(size => (\\\\n            <span style={ radioStyle } key={ size }>\\\\n                <Radio\\\\n                    text='Семейный счёт'\\\\n                    size={ size }\\\\n                    disabled={ true }\\\\n                />\\\\n            </span>\\\\n        ))}\\\\n    </div>\\\\n    <div>\\\\n        {['s', 'm', 'l', 'xl'].map(size => (\\\\n            <span style={ radioStyle } key={ size }>\\\\n                <Radio\\\\n                    text='Текущий счёт'\\\\n                    size={ size }\\\\n                    type='button'\\\\n                />\\\\n            </span>\\\\n        ))}\\\\n    </div>\\\\n    <div className='row'>\\\\n        {['s', 'm', 'l', 'xl'].map(size => (\\\\n            <span style={ radioStyle } key={ size }>\\\\n                <Radio\\\\n                    text='Семейный счёт'\\\\n                    size={ size }\\\\n                    type='button'\\\\n                    disabled={ true }\\\\n                />\\\\n            </span>\\\\n        ))}\\\\n    </div>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/radio\\",
            \\"documentation\\": {
              \\"path\\": \\"src/radio/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/radio/radio.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Radio\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Тип\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"normal\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"button\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление состоянием вкл/выкл компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"checked\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменения состояние 'checked' компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Уникальный идентификатор блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Уникальное имя блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Значение радио-кнопки, которое будет отправлено на сервер, если она выбрана\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Текст подписи к радио-кнопке\\",
              \\"isRequired\\": false,
              \\"name\\": \\"text\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление шириной кнопки для типа 'button'. При значении 'available' растягивает кнопку на ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Отображение в состоянии ошибки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": 0
              },
              \\"description\\": \\"Последовательность перехода между контролами при нажатии на Tab\\",
              \\"isRequired\\": false,
              \\"name\\": \\"tabIndex\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса комнонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса с компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события наведения курсора на радио-кнопку\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseEnter\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события снятия курсора с радио-кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMouseLeave\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<RadioGroup>\\\\n    {['Один', 'Два', 'Три', 'Четыре'].map(text => (\\\\n        <Radio\\\\n            text={ text }\\\\n            key={ text }\\\\n            value={ text }\\\\n        />\\\\n    ))}\\\\n</RadioGroup>\\"
              },
              {
                \\"code\\": \\"<RadioGroup error='Обязательно' label='Сколько?'>\\\\n    {['Один', 'Два', 'Три', 'Четыре'].map(text => (\\\\n        <Radio\\\\n            text={ text }\\\\n            key={ text }\\\\n            value={ text }\\\\n        />\\\\n    ))}\\\\n</RadioGroup>\\"
              },
              {
                \\"code\\": \\"<div className='row'>\\\\n    {['m', 'l'].map(size => (\\\\n        <div className='column'>\\\\n            <RadioGroup key={ size } size={ size } error='Обязательно' label='Сколько?'>\\\\n                {['Один', 'Два', 'Три', 'Четыре'].map(text =>\\\\n                    <Radio text={ text } key={ text } value={ text } />\\\\n                )}\\\\n            </RadioGroup>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div className='row'>\\\\n            <RadioGroup\\\\n                key={ size }\\\\n                error='Обязательно'\\\\n                label='Сколько?'\\\\n                size={ size }\\\\n                type='button'\\\\n            >\\\\n                {['Один', 'Два', 'Три', 'Четыре'].map(text => (\\\\n                    <Radio\\\\n                        key={ text }\\\\n                        size={ size }\\\\n                        text={ text }\\\\n                        type='button'\\\\n                        value={ text }\\\\n                    />\\\\n                ))}\\\\n            </RadioGroup>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"<RadioGroup type='button' error='Обязательно'>\\\\n    {['Один', 'Два', 'Три', 'Четыре'].map(text => (\\\\n        <Radio\\\\n            text={ text }\\\\n            key={ text }\\\\n            value={ text }\\\\n            type='button'\\\\n        />\\\\n    ))}\\\\n</RadioGroup>\\"
              },
              {
                \\"code\\": \\"<RadioGroup type='button' hint='Уточняющий текст'>\\\\n    {['Один', 'Два', 'Три', 'Четыре'].map(text => (\\\\n        <Radio\\\\n            text={ text }\\\\n            key={ text }\\\\n            value={ text }\\\\n            type='button'\\\\n        />\\\\n    ))}\\\\n</RadioGroup>\\"
              },
              {
                \\"code\\": \\"<RadioGroup width='available' type='button'>\\\\n    {['Один', 'Два', 'Три', 'Четыре'].map(text => (\\\\n        <Radio\\\\n            text={ text }\\\\n            key={ text }\\\\n            value={ text }\\\\n            type='button'\\\\n        />\\\\n    ))}\\\\n</RadioGroup>\\"
              },
              {
                \\"code\\": \\"<RadioGroup type='line'>\\\\n    {['Один', 'Два', 'Три', 'Четыре'].map(text => (\\\\n        <Radio\\\\n            text={ text }\\\\n            key={ text }\\\\n            value={ text }\\\\n        />\\\\n    ))}\\\\n</RadioGroup>\\"
              },
              {
                \\"code\\": \\"<RadioGroup label='Число' type='button' error='Обязательно' width='available'>\\\\n    {['Один', 'Два', 'Три', 'Четыре'].map(text => (\\\\n        <Radio\\\\n            text={ text }\\\\n            key={ text }\\\\n            value={ text }\\\\n            type='button'\\\\n        />\\\\n    ))}\\\\n</RadioGroup>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/radio-group\\",
            \\"documentation\\": {
              \\"path\\": \\"src/radio-group/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/radio-group/radio-group.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"RadioGroup\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": \\"normal\\"
              },
              \\"description\\": \\"Тип группы кнопок\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"normal\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"button\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"line\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Значение выбранной радио-кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Отображение попапа с ошибкой в момент когда фокус находится на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размеры pub и sub\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Управление шириной группы кнопок для типа 'button'. При значении 'available' растягивает группу на ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Уникальное имя блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление возможностью изменения состояния 'checked' дочерних компонентов \`Radio\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние элементы \`RadioGroup\`, как правило, компоненты \`Radio\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Лейбл для группы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Подсказка под полем\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hint\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса радиогруппы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса с радиогруппы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик изменения значения 'checked' одного из дочерних радио-кнопок\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/render-in-container\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/render-in-container/render-in-container.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"RenderInContainer\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дочерние элементы контейнера\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Контейнер, в котором будет визуализирован компонент\\",
              \\"isRequired\\": false,
              \\"name\\": \\"container\\",
              \\"type\\": {
                \\"name\\": \\"custom\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Callback на рендер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onRender\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/resize-sensor\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/resize-sensor/resize-sensor.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"ResizeSensor\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Callback на изменение размера родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onResize\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const options = [\\\\n    { value: '01', text: 'ИП Фридман М.М.' },\\\\n    { value: '02', text: 'ООО «Виктори»' },\\\\n    { value: '03', text: 'ФГУП НПП ВНИИЭМ' }\\\\n];\\\\n<div>\\\\n    {['s'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    size={ size }\\\\n                    mode='radio'\\\\n                    options={ options }\\\\n                />\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    size={ size }\\\\n                    mode='radio'\\\\n                    options={ options }\\\\n                    disabled={ true }\\\\n                />\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const options = [\\\\n    { value: '01', text: 'ИП Фридман М.М.' },\\\\n    { value: '02', text: 'ООО «Виктори»' },\\\\n    { value: '03', text: 'ФГУП НПП ВНИИЭМ' }\\\\n];\\\\n<div>\\\\n    {['m'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    size={ size }\\\\n                    mode='check'\\\\n                    options={ options }\\\\n                />\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    size={ size }\\\\n                    mode='check'\\\\n                    options={ options }\\\\n                    disabled={ true }\\\\n                />\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const options = [\\\\n    { value: '01', text: 'ИП Фридман М.М.' },\\\\n    { value: '02', text: 'ООО «Виктори»' },\\\\n    { value: '03', text: 'ФГУП НПП ВНИИЭМ' }\\\\n];\\\\n<div>\\\\n    {['xl'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    size={ size }\\\\n                    mode='radio-check'\\\\n                    options={ options }\\\\n                />\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    size={ size }\\\\n                    mode='radio-check'\\\\n                    options={ options }\\\\n                    disabled={ true }\\\\n                />\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const options = [\\\\n    { value: '1', text: 'ФГУП НПП ВНИИЭМ им. Андроника Гевондовича Иосифьяна' },\\\\n    { value: '2', text: 'Муниципальное образовательное учреждение дополнительного образования детей специализированная детско-юношеская спортивная школа олимпийского резерва по боксу' },\\\\n    { value: '3', text: 'Федеральное государственное учреждение Ивановский научно-исследовательский институт материнства и детства имени Виктора Николаевича Городкова' },\\\\n    { value: '4', text: 'ООО «Брянсеметаллстройтехкомплект»' },\\\\n    { value: '5', text: 'ГОУ ДПО БелРИПКППС' },\\\\n    { value: '6', text: 'ООО «Абсолютная власть»' }\\\\n];\\\\n<div>\\\\n    {['l'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    width='available'\\\\n                    size={ size }\\\\n                    mode='check'\\\\n                    options={ options }\\\\n                />\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    width='available'\\\\n                    size={ size }\\\\n                    mode='check'\\\\n                    options={ options }\\\\n                    disabled={ true }\\\\n                />\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const options = [\\\\n    { value: '00', text: 'ИП Фридман М.М.' },\\\\n    { value: '01', text: 'ООО «Виктори»' },\\\\n    { value: '02', text: 'ФГУП НПП ВНИИЭМ' },\\\\n    { value: '03', text: 'ООО «Абсолютная власть»' },\\\\n    { value: '04', text: 'ГОУ ДПО БелРИПКППС' },\\\\n    { value: '05', text: 'ООО «Здравый смысл»' },\\\\n    { value: '06', text: 'ООО «Владимирский Централ»' },\\\\n    { value: '07', text: 'ЗАО «Вам и не снилось»' },\\\\n    { value: '08', text: 'ООО «Лучше наличными»' },\\\\n    { value: '09', text: 'ООО «Какие Люди»' },\\\\n    { value: '10', text: 'ООО «Ы»' },\\\\n    { value: '11', text: 'ООО «Ооо»' },\\\\n    { value: '12', text: 'ООО Банк «Прохладный»' },\\\\n    { value: '13', text: 'ООО «Хомячки»' },\\\\n    { value: '14', text: 'ИП Фридман М.М.' },\\\\n    { value: '16', text: 'ООО «Виктори»' },\\\\n    { value: '17', text: 'ФГУП НПП ВНИИЭМ' },\\\\n    { value: '18', text: 'ООО «Паньки»' },\\\\n    { value: '19', text: 'ЗАО «Хотя нет»' },\\\\n    { value: '20', text: 'ООО «Какой большой!»' },\\\\n    { value: '21', text: 'ООО «ДАА»' },\\\\n    { value: '22', text: 'ИП Фридман М.М.' },\\\\n    { value: '23', text: 'ООО «Какие Люди»' },\\\\n    { value: '24', text: 'ООО «Лучше наличными»' },\\\\n    { value: '25', text: 'ГОУ ДПО БелРИПКППС' },\\\\n    { value: '26', text: 'ООО Банк «Прохладный»' },\\\\n    { value: '27', text: 'ГОУ ДПО БелРИПКППС' },\\\\n    { value: '28', text: 'ЗАО «Вам и не снилось»' },\\\\n    { value: '29', text: 'ООО «Виктори»' },\\\\n    { value: '30', text: 'ФГУП НПП ВНИИЭМ' },\\\\n    { value: '31', text: 'ООО «Хомячки»' },\\\\n    { value: '32', text: 'ООО «Владимирский Централ»' },\\\\n    { value: '33', text: 'ООО «Какие Люди»' },\\\\n    { value: '34', text: 'ООО «Здравый смысл»' },\\\\n    { value: '35', text: 'ООО «Ооо»' }\\\\n];\\\\n<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div className='row' key={ size }>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    size={ size }\\\\n                    mode='radio'\\\\n                    options={ options }\\\\n                    mobileMenuMode='popup'\\\\n                    mobileTitle='Очень длинный заголовок на мобильном устройстве'\\\\n                />\\\\n            </div>\\\\n            <div className='column'>\\\\n                <Select\\\\n                    size={ size }\\\\n                    mode='radio'\\\\n                    options={ options }\\\\n                    mobileMenuMode='popup'\\\\n                    disabled={ true }\\\\n                />\\\\n            </div>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              },
              {
                \\"code\\": \\"const options = [\\\\n    {\\\\n        type: 'group',\\\\n        title: 'ИП УСН 6%',\\\\n        content: [\\\\n            { value: '1', text: 'ИП Иванов' },\\\\n            { value: '2', text: 'ИП Баринов' }\\\\n        ]\\\\n    },\\\\n    {\\\\n        type: 'group',\\\\n        title: 'ИП УСН 15%',\\\\n        content: [\\\\n            { value: '3', text: 'ИП Семёнов' },\\\\n            { value: '4', text: 'ИП Лягушкин' }\\\\n        ]\\\\n    },\\\\n    {\\\\n        type: 'group',\\\\n        title: '',\\\\n        content: [\\\\n            { value: '5', text: 'ИП Лукина' }\\\\n        ]\\\\n    }\\\\n];\\\\nconst options2 = [\\\\n    {\\\\n        type: 'group',\\\\n        title: 'а)',\\\\n        content: [\\\\n            { value: '1', text: 'ИП Иванов' },\\\\n            { value: '2', text: 'ИП Баринов' }\\\\n        ]\\\\n    },\\\\n    {\\\\n        type: 'group',\\\\n        title: 'б)',\\\\n        content: [\\\\n            { value: '3', text: 'ИП Семёнов' },\\\\n            { value: '4', text: 'ИП Лягушкин' }\\\\n        ]\\\\n    },\\\\n    {\\\\n        type: 'group',\\\\n        title: '',\\\\n        content: [\\\\n            { value: '5', text: 'ИП Лукина' }\\\\n        ]\\\\n    }\\\\n];\\\\n<div>\\\\n    <div className='row' >\\\\n        <div className='column'>\\\\n            <Select\\\\n                groupView='default'\\\\n                options={ options }\\\\n                mode='radio'\\\\n            />\\\\n        </div>\\\\n        <div className='column'>\\\\n            <Select\\\\n                groupView='line'\\\\n                options={ options2 }\\\\n                mode='radio'\\\\n                value={ ['4'] }\\\\n            />\\\\n        </div>\\\\n    </div>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/select\\",
            \\"documentation\\": {
              \\"path\\": \\"src/select/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/select/select.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Select\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"check\\"
              },
              \\"description\\": \\"Тип выпадающего списка\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mode\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"check\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"radio\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"radio-check\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"default\\"
              },
              \\"description\\": \\"Размещение заголовка групп: обычное или в одну строку с первым элементом группы\\",
              \\"isRequired\\": false,
              \\"name\\": \\"groupView\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"line\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"default\\"
              },
              \\"description\\": \\"Управление возможностью компонента занимать всю ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": [
                  \\"bottom-left\\",
                  \\"bottom-right\\",
                  \\"top-left\\",
                  \\"top-right\\"
                ]
              },
              \\"description\\": \\"Направления, в которые может открываться попап компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"directions\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-left\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"top-right\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-top\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"left-bottom\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-top\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"right-bottom\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-left\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-center\\"
                          }
                        },
                        {
                          \\"name\\": \\"literal\\",
                          \\"structure\\": {
                            \\"value\\": \\"bottom-right\\"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление возможностью редактирования значения\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Управление видимостью выпадающего списка\\",
              \\"isRequired\\": false,
              \\"name\\": \\"opened\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Ширинa выпадающего списка равна ширине кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"equalPopupWidth\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Список выбранных значений\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"union\\",
                    \\"structure\\": {
                      \\"elements\\": [
                        {
                          \\"name\\": \\"string\\",
                          \\"structure\\": {}
                        },
                        {
                          \\"name\\": \\"number\\",
                          \\"structure\\": {}
                        }
                      ]
                    }
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": []
              },
              \\"description\\": \\"Список вариантов выбора\\",
              \\"isRequired\\": false,
              \\"name\\": \\"options\\",
              \\"type\\": {
                \\"name\\": \\"typedArray\\",
                \\"structure\\": {
                  \\"memberType\\": {
                    \\"name\\": \\"shape\\",
                    \\"structure\\": {
                      \\"checkedText\\": {
                        \\"name\\": \\"string\\",
                        \\"structure\\": {}
                      },
                      \\"content\\": {
                        \\"name\\": \\"array\\",
                        \\"structure\\": {}
                      },
                      \\"description\\": {
                        \\"name\\": \\"node\\",
                        \\"structure\\": {}
                      },
                      \\"icon\\": {
                        \\"name\\": \\"node\\",
                        \\"structure\\": {}
                      },
                      \\"nativeText\\": {
                        \\"name\\": \\"string\\",
                        \\"structure\\": {}
                      },
                      \\"text\\": {
                        \\"name\\": \\"node\\",
                        \\"structure\\": {}
                      },
                      \\"type\\": {
                        \\"name\\": \\"union\\",
                        \\"structure\\": {
                          \\"elements\\": [
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"item\\"
                              }
                            },
                            {
                              \\"name\\": \\"literal\\",
                              \\"structure\\": {
                                \\"value\\": \\"group\\"
                              }
                            }
                          ]
                        }
                      },
                      \\"value\\": {
                        \\"name\\": \\"union\\",
                        \\"structure\\": {
                          \\"elements\\": [
                            {
                              \\"name\\": \\"string\\",
                              \\"structure\\": {}
                            },
                            {
                              \\"name\\": \\"number\\",
                              \\"structure\\": {}
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Уникальный идентификатор блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Уникальное имя блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Лейбл для поля\\",
              \\"isRequired\\": false,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"Выберите:\\"
              },
              \\"description\\": \\"Подсказка в поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"placeholder\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Подсказка под полем\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hint\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Отображение ошибки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"native\\"
              },
              \\"description\\": \\"Управление нативным режимом на мобильных устройствах\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mobileMenuMode\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"native\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"popup\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Подсказка над меню в мобильном режиме\\",
              \\"isRequired\\": false,
              \\"name\\": \\"mobileTitle\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Смещение в пикселях всплывающего окна относительно основного направления (только на десктопе)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"popupMainOffset\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Смещение в пикселях всплывающего окна относительно второстепенного направления (только на десктопе)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"popupSecondaryOffset\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса на компоненте\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик потери фокуса компонентом\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса на кнопке\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onButtonFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик потери у кнопки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onButtonBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса на меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMenuFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик потери фокуса у меню\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMenuBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика по кнопке компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика вне компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClickOutside\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик изменения значения\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик нажатия на клавишу\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onKeyDown\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Кастомный метод рендера содержимого кнопки, принимает на вход: массив элементов типа [CheckedOption](#CheckedOption)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"renderButtonContent\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"function toggleSidebar() {\\\\n    setState({ isOpen: !state.isOpen });\\\\n}\\\\ninitialState = {\\\\n    isOpen: false\\\\n};\\\\n<div>\\\\n    <Button onClick={ toggleSidebar }>Выписка по счёту</Button>\\\\n    <Sidebar\\\\n        visible={ state.isOpen }\\\\n        onCloserClick={ toggleSidebar }\\\\n    >\\\\n        <Heading size='m'>\\\\n            Выписка по счёту\\\\n        </Heading>\\\\n        <div style={ { marginBottom: 20 } }>\\\\n            <Input\\\\n                label='Куда отправить выписку?'\\\\n                size='m'\\\\n                placeholder='Адрес электронной почты'\\\\n            />\\\\n        </div>\\\\n        <Paragraph>\\\\n            100-дневный беспроцентный период начинается с момента образования задолженности по кредитной карте\\\\n            и возобновляется на следующий день после полного ее погашения. Беспроцентный период действует\\\\n            при условии внесения ежемесячного мин. платежа - 5% от суммы долга (мин. 320 руб.).\\\\n            Ставка - от 23,99% годовых, определяется индивидуально. Стоимость обслуживания карты - от 1190 р. до 6 990 руб.\\\\n            в год. АО «Альфа-Банк» не взимает комиссию за снятие наличных при месячном лимите снятия не более 50 000 руб.\\\\n            При снятии суммы выше лимита взимается комиссия на разницу в размере 3.9%-5,9%, мин. 300-500 руб.\\\\n            (зависит от категории карты). Банк оставляет за собой исключительное право на предоставление или отказ\\\\n            в предоставлении кредита. АО «Альфа-Банк». Ген. лицензия ЦБ РФ №1326 от 16.01.2015\\\\n        </Paragraph>\\\\n        <Paragraph>\\\\n            100-дневный беспроцентный период начинается с момента образования задолженности по кредитной карте\\\\n            и возобновляется на следующий день после полного ее погашения. Беспроцентный период действует\\\\n            при условии внесения ежемесячного мин. платежа - 5% от суммы долга (мин. 320 руб.).\\\\n            Ставка - от 23,99% годовых, определяется индивидуально. Стоимость обслуживания карты - от 1190 р. до 6 990 руб.\\\\n            в год. АО «Альфа-Банк» не взимает комиссию за снятие наличных при месячном лимите снятия не более 50 000 руб.\\\\n            При снятии суммы выше лимита взимается комиссия на разницу в размере 3.9%-5,9%, мин. 300-500 руб.\\\\n            (зависит от категории карты). Банк оставляет за собой исключительное право на предоставление или отказ\\\\n            в предоставлении кредита. АО «Альфа-Банк». Ген. лицензия ЦБ РФ №1326 от 16.01.2015\\\\n        </Paragraph>\\\\n        <Button size='m' view='extra'>Отправить</Button>\\\\n    </Sidebar>\\\\n</div>\\"
              },
              {
                \\"code\\": \\"function toggleSidebar() {\\\\n    setState({ isOpen: !state.isOpen });\\\\n}\\\\ninitialState = {\\\\n    isOpen: false\\\\n};\\\\n<div>\\\\n    <Button onClick={ toggleSidebar }>Фильтр</Button>\\\\n    <Sidebar\\\\n        headerContent={\\\\n            <button\\\\n                style={ {\\\\n                    margin: 0,\\\\n                    padding: 0,\\\\n                    border: 0,\\\\n                    background: 'none',\\\\n                    outline: 'none',\\\\n                    font: 'inherit',\\\\n                    cursor: 'pointer'\\\\n                } }\\\\n                onClick={ toggleSidebar }\\\\n            >\\\\n                Применить\\\\n            </button>\\\\n        }\\\\n        visible={ state.isOpen }\\\\n        onCloserClick={ toggleSidebar }\\\\n    >\\\\n        <div style={ { marginBottom: 40 } }>\\\\n            <Heading size='s'>\\\\n                Тип операции\\\\n            </Heading>\\\\n            <RadioGroup type='button'>\\\\n                {['Пополнение', 'Списание'].map(text => (\\\\n                    <Radio\\\\n                        text={ text }\\\\n                        key={ text }\\\\n                        value={ text }\\\\n                        type='button'\\\\n                    />\\\\n                ))}\\\\n            </RadioGroup>\\\\n        </div>\\\\n        <div style={ { marginBottom: 40 } }>\\\\n            <Heading size='s'>\\\\n                Счета\\\\n            </Heading>\\\\n            <CheckBoxGroup type='button'>\\\\n                {['Счёт ₽ ··2331', 'Счёт $ ··2331'].map(text => (\\\\n                    <CheckBox\\\\n                        text={ text }\\\\n                        key={ text }\\\\n                        value={ text }\\\\n                        type='button'\\\\n                    />\\\\n                ))}\\\\n            </CheckBoxGroup>\\\\n        </div>\\\\n        <div style={ { marginBottom: 40 } }>\\\\n            <Heading size='s'>\\\\n                Дата операции\\\\n            </Heading>\\\\n            <RadioGroup type='button'>\\\\n                {['День', 'Месяц', 'Год'].map(text => (\\\\n                    <Radio\\\\n                        text={ text }\\\\n                        key={ text }\\\\n                        value={ text }\\\\n                        type='button'\\\\n                    />\\\\n                ))}\\\\n            </RadioGroup>\\\\n        </div>\\\\n    </Sidebar>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/sidebar\\",
            \\"documentation\\": {
              \\"path\\": \\"src/sidebar/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/sidebar/sidebar.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Sidebar\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние компоненты\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"typedArray\\",
                      \\"structure\\": {
                        \\"memberType\\": {
                          \\"name\\": \\"node\\",
                          \\"structure\\": {}
                        }
                      }
                    },
                    {
                      \\"name\\": \\"node\\",
                      \\"structure\\": {}
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Признак для отрисовки элемента закрытия\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hasCloser\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Признак для отрисовки оверлея\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hasOverlay\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Признак появления сайдбара\\",
              \\"isRequired\\": true,
              \\"name\\": \\"visible\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Контент в шапке сайдбара\\",
              \\"isRequired\\": false,
              \\"name\\": \\"headerContent\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": 430
              },
              \\"description\\": \\"Ширина сайдбара\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик клика на элемент закрытия\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onCloserClick\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"function handleSlideDownToggle() {\\\\n    setState({ isExpanded: !state.isExpanded });\\\\n}\\\\ninitialState = {\\\\n    isExpanded: false\\\\n};\\\\n<div>\\\\n    <Button\\\\n        onClick={ handleSlideDownToggle }\\\\n    >\\\\n        Как узнать дату и сумму платежа\\\\n    </Button>\\\\n    <div className='row' >\\\\n        <SlideDown isExpanded={ state.isExpanded }>\\\\n            <Paragraph>\\\\n                Узнать сумму платежа по кредиту с ежемесячным погашением равными частями вы\\\\n                можете из графика погашения, предоставленного при оформлении кредита.\\\\n            </Paragraph>\\\\n        </SlideDown>\\\\n    </div>\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/slide-down\\",
            \\"documentation\\": {
              \\"path\\": \\"src/slide-down/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/slide-down/slide-down.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"SlideDown\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Управление состоянием expand/collapse компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"isExpanded\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Контент компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"const layoutStyle = {\\\\n    paddingRight: '10px'\\\\n};\\\\n<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <span key={ size } style={ layoutStyle } >\\\\n            <Button\\\\n                icon={\\\\n                    <Spin\\\\n                        size={ size }\\\\n                        visible={ true }\\\\n                    />\\\\n                }\\\\n                size={ size }\\\\n            >\\\\n                Документы загружаются...\\\\n            </Button>\\\\n        </span>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/spin\\",
            \\"documentation\\": {
              \\"path\\": \\"src/spin/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/spin/spin.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Spin\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление видимостью компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"visible\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/swipeable\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/swipeable/swipeable.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Swipeable\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": 100
              },
              \\"description\\": \\"Число пикселей, на которое нужно сместиться, чтобы запустить функцию по свайпу\\",
              \\"isRequired\\": false,
              \\"name\\": \\"delta\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Функция запускаемая по свайпу. Принимает в качестве аргумента направление свайпа ('top', 'right', 'bottom', 'left')\\",
              \\"isRequired\\": true,
              \\"name\\": \\"onSwipe\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерний компонент представленный в виде единичного элемента\\",
              \\"isRequired\\": true,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"shape\\",
                \\"structure\\": {
                  \\"props\\": {
                    \\"name\\": \\"shape\\",
                    \\"structure\\": {
                      \\"onMouseDown\\": {
                        \\"name\\": \\"func\\",
                        \\"structure\\": {}
                      },
                      \\"onTouchStart\\": {
                        \\"name\\": \\"func\\",
                        \\"structure\\": {}
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<TabItem checked={ true } url='google.com'>\\\\n    Пункт меню\\\\n</TabItem>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/tab-item\\",
            \\"documentation\\": {
              \\"path\\": \\"src/tab-item/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/tab-item/tab-item.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"TabItem\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"initialState = {\\\\n    page: '/about'\\\\n};\\\\nfunction handleClick(event) {\\\\n    event.preventDefault();\\\\n    setState({ page: event.target.getAttribute('href') });\\\\n}\\\\n<Tabs>\\\\n    <TabItem url='/about' onClick={ handleClick } checked={ state.page === '/about' }>\\\\n        О кредите\\\\n    </TabItem>\\\\n    <TabItem url='/graph' onClick={ handleClick } checked={ state.page === '/graph' }>\\\\n        График платежей\\\\n    </TabItem>\\\\n    <TabItem url='/details' onClick={ handleClick } checked={ state.page === '/details' }>\\\\n        Реквизиты\\\\n    </TabItem>\\\\n</Tabs>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/tabs\\",
            \\"documentation\\": {
              \\"path\\": \\"src/tabs/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/tabs/tabs.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Tabs\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Управление возможность скроллить компонент по-горизонтали\\",
              \\"isRequired\\": false,
              \\"name\\": \\"scrollable\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дочерние компоненты\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Идентификатор компонента в DOM\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<div>\\\\n    {['s', 'm', 'l', 'xl'].map(size => (\\\\n        <div\\\\n            key={ size }\\\\n            style={ { marginBottom: 10 } }\\\\n        >\\\\n            <TagButton size={ size }>{\`Tag \${size}\`}</TagButton>\\\\n        </div>\\\\n    ))}\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/tag-button\\",
            \\"documentation\\": {
              \\"path\\": \\"src/tag-button/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/tag-button/tag-button.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"TagButton\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Textarea placeholder='Введите назначение платежа' />\\"
              },
              {
                \\"code\\": \\"<Textarea\\\\n    placeholder='Введите назначение платежа'\\\\n    error='Нужно указать назначение платежа'\\\\n/>\\"
              },
              {
                \\"code\\": \\"<Textarea\\\\n    placeholder='Введите назначение платежа'\\\\n    autosize={ true }\\\\n/>\\"
              },
              {
                \\"code\\": \\"initialState = {\\\\n    value: 'Благотворительный взнос в фонд «Бедные дизайнеры»'\\\\n};\\\\nfunction handleChangeAsync(value) {\\\\n    setTimeout(() => {\\\\n        setState({ value });\\\\n    }, 200);\\\\n}\\\\n<div>\\\\n    <Textarea\\\\n        hint={ \`Текущее значение в поле: \${state.value}\` }\\\\n        placeholder='Введите назначение платежа'\\\\n        value={ state.value }\\\\n        onChange={ handleChangeAsync }\\\\n    />\\\\n</div>\\"
              },
              {
                \\"code\\": \\"initialState = {\\\\n    value: 'Благотворительный взнос в фонд «Бедные дизайнеры»'\\\\n};\\\\nfunction handleChangeAsync(value) {\\\\n    setTimeout(() => {\\\\n        setState({ value });\\\\n    }, 200);\\\\n}\\\\n<div>\\\\n    <Textarea\\\\n        defaultValue={ state.value }\\\\n        hint={ \`Текущее значение в поле: \${state.value}\` }\\\\n        placeholder='Введите назначение платежа'\\\\n        onChange={ handleChangeAsync }\\\\n    />\\\\n</div>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/textarea\\",
            \\"documentation\\": {
              \\"path\\": \\"src/textarea/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/textarea/textarea.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Textarea\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"default\\"
              },
              \\"description\\": \\"Управление возможностью компонента занимать всю ширину родителя\\",
              \\"isRequired\\": false,
              \\"name\\": \\"width\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"default\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"available\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Управление автозаполнением компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"autocomplete\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": false
              },
              \\"description\\": \\"Управление возможностью изменения значения компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": true
              },
              \\"description\\": \\"Управление возможностью подстраивать высоту компонента под высоту текста\\",
              \\"isRequired\\": false,
              \\"name\\": \\"autosize\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Максимальное число символов\\",
              \\"isRequired\\": false,
              \\"name\\": \\"maxLength\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Уникальный идентификатор блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Уникальное имя блока\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Содержимое поля ввода, указанное по умолчанию (используйте это поле если хотите использовать компонент как uncontrolled)\\",
              \\"isRequired\\": false,
              \\"name\\": \\"defaultValue\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Содержимое поля ввода\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Последовательность перехода между контролами при нажатии на Tab\\",
              \\"isRequired\\": false,
              \\"name\\": \\"tabIndex\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Лейбл для поля\\",
              \\"isRequired\\": false,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Подсказка в поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"placeholder\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Подсказка под полем\\",
              \\"isRequired\\": false,
              \\"name\\": \\"hint\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Отображение ошибки\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"m\\"
              },
              \\"description\\": \\"Размер компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"s\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"m\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"l\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"xl\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"defaultValue\\": {
                \\"value\\": \\"none\\"
              },
              \\"description\\": \\"Управление возможностью изменения размеров компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"resize\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"both\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"horizontal\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"vertical\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"none\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            },
            {
              \\"description\\": \\"Обработчик изменения значения 'value'\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик фокуса поля\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик снятия фокуса c поля\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события вставки текста в поле\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onPaste\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Обработчик события изменения высоты компонента со значением параметра \\\\\\"autosize\\\\\\" = true\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onHeightChange\\",
              \\"type\\": {
                \\"name\\": \\"func\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/theme-provider\\",
            \\"documentation\\": {
              \\"path\\": \\"src/theme-provider/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"javascript\\",
              \\"path\\": \\"src/theme-provider/theme-provider.jsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"ThemeProvider\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Дочерний элемент \`ThemeProvider\`\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Дополнительный класс\\",
              \\"isRequired\\": false,
              \\"name\\": \\"className\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Тема компонента\\",
              \\"isRequired\\": false,
              \\"name\\": \\"theme\\",
              \\"type\\": {
                \\"name\\": \\"union\\",
                \\"structure\\": {
                  \\"elements\\": [
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-color\\"
                      }
                    },
                    {
                      \\"name\\": \\"literal\\",
                      \\"structure\\": {
                        \\"value\\": \\"alfa-on-white\\"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      \\"name\\": \\"Uncategorized\\"
    }
  ],
  \\"name\\": \\"Library from Code\\",
  \\"vcs\\": {
    \\"branchName\\": \\"HEAD\\",
    \\"commitHash\\": \\"14546410449fdaa2014d3f32cf404291cca41c50\\"
  }
}
"
`;
