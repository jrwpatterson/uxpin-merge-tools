// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The --dump option run for the polaris repository, prints the JSON describing the full repository 1`] = `
"{
	components: [
		{
			dirPath: 'src/components/AccountConnection',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/AccountConnection/AccountConnection.tsx'
			},
			name: 'AccountConnection',
			documentation: {
				path: 'src/components/AccountConnection/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'connected',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'action',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'avatarUrl',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accountName',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'title',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'details',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'termsOfService',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/ActionList',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/ActionList/ActionList.tsx'
			},
			name: 'ActionList',
			documentation: {
				path: 'src/components/ActionList/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'items',
					type: {
						name: 'Props[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sections',
					type: {
						name: 'Section[]',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Avatar',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Avatar/Avatar.tsx'
			},
			name: 'Avatar',
			documentation: {
				path: 'src/components/Avatar/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'size',
					type: {
						name: 'Size',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'initials',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'customer',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'source',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accessibilityLabel',
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Badge',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Badge/Badge.tsx'
			},
			name: 'Badge',
			documentation: {
				path: 'src/components/Badge/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'status',
					type: {
						name: 'Status',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'progress',
					type: {
						name: 'Progress',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Banner',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Banner/Banner.tsx'
			},
			name: 'Banner',
			documentation: {
				path: 'src/components/Banner/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'SVGSource | \\"placeholder\\" | \\"add\\" | \\"alert\\" | \\"arrowDown\\" | \\"arrowLeft\\" | \\"arrowRight\\" | \\"arrowUp...',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'status',
					type: {
						name: 'Status',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'action',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'secondaryAction',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDismiss',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Breadcrumbs',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Breadcrumbs/Breadcrumbs.tsx'
			},
			name: 'Breadcrumbs',
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'breadcrumbs',
					type: {
						name: 'LinkAction[]',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Button',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Button/Button.tsx'
			},
			name: 'Button',
			documentation: {
				path: 'src/components/Button/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'url',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'size',
					type: {
						name: 'Size',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'fullWidth',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'primary',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'outline',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'destructive',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'loading',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'plain',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'external',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'submit',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disclosure',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accessibilityLabel',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'SVGSource | \\"placeholder\\" | \\"add\\" | \\"alert\\" | \\"arrowDown\\" | \\"arrowLeft\\" | \\"arrowRight\\" | \\"arrowUp...',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onClick',
					type: {
						name: '() => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: '() => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/ButtonGroup',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/ButtonGroup/ButtonGroup.tsx'
			},
			name: 'ButtonGroup',
			documentation: {
				path: 'src/components/ButtonGroup/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'segmented',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/CalloutCard',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/CalloutCard/CalloutCard.tsx'
			},
			name: 'CalloutCard',
			documentation: {
				path: 'src/components/CalloutCard/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'illustration',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'primaryAction',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'secondaryAction',
					type: {
						name: 'Action',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Caption',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Caption/Caption.tsx'
			},
			name: 'Caption',
			documentation: {
				path: 'src/components/Caption/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Card',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Card/Card.tsx'
			},
			name: 'Card',
			documentation: {
				path: 'src/components/Card/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'subdued',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sectioned',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'actions',
					type: {
						name: 'Action[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'primaryFooterAction',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'secondaryFooterAction',
					type: {
						name: 'Action',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Checkbox',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Checkbox/Checkbox.tsx'
			},
			name: 'Checkbox',
			documentation: {
				path: 'src/components/Checkbox/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'labelHidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'helpText',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'error',
					type: {
						name: 'Error',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: '(newValue: boolean, id: string) => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: '() => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Choice',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Choice/Choice.tsx'
			},
			name: 'Choice',
			documentation: {
				path: 'src/components/Choice/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'error',
					type: {
						name: 'Error',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'labelHidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'helpText',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/ChoiceList',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/ChoiceList/ChoiceList.tsx'
			},
			name: 'ChoiceList',
			documentation: {
				path: 'src/components/ChoiceList/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'titleHidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'choices',
					type: {
						name: 'ChoiceDescriptor[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'selected',
					type: {
						name: 'string[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'allowMultiple',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: '(selected: string[], name: string) => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Collapsible',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Collapsible/Collapsible.tsx'
			},
			name: 'Collapsible',
			documentation: {
				path: 'src/components/Collapsible/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'open',
					type: {
						name: 'boolean',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/ColorPicker',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/ColorPicker/ColorPicker.tsx'
			},
			name: 'ColorPicker',
			documentation: {
				path: 'src/components/ColorPicker/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'color',
					type: {
						name: 'Color',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'allowAlpha',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'onChange',
					type: {
						name: '(color: HSBAColor) => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Connected',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Connected/Connected.tsx'
			},
			name: 'Connected',
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'left',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'right',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/DatePicker',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/DatePicker/DatePicker.tsx'
			},
			name: 'DatePicker',
			documentation: {
				path: 'src/components/DatePicker/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'selected',
					type: {
						name: 'Date | Range',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'month',
					type: {
						name: 'Months',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'year',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disableDatesBefore',
					type: {
						name: 'Date',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disableDatesAfter',
					type: {
						name: 'Date',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'multiMonth',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: '(date: Range) => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMonthChange',
					type: {
						name: '(month: Months, year: number) => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/DescriptionList',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/DescriptionList/DescriptionList.tsx'
			},
			name: 'DescriptionList',
			documentation: {
				path: 'src/components/DescriptionList/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'items',
					type: {
						name: 'Item[]',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/DisplayText',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/DisplayText/DisplayText.tsx'
			},
			name: 'DisplayText',
			documentation: {
				path: 'src/components/DisplayText/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'element',
					type: {
						name: 'HeadingTagName',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'size',
					type: {
						name: 'Size',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/EmptyState',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/EmptyState/EmptyState.tsx'
			},
			name: 'EmptyState',
			documentation: {
				path: 'src/components/EmptyState/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'image',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'largeImage',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'imageContained',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'heading',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'action',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'secondaryAction',
					type: {
						name: 'Action',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/EventListener',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/EventListener/EventListener.tsx'
			},
			name: 'EventListener',
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'event',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'capture',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'passive',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'handler',
					type: {
						name: '(event: Event) => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/FooterHelp',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/FooterHelp/FooterHelp.tsx'
			},
			name: 'FooterHelp',
			documentation: {
				path: 'src/components/FooterHelp/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/FormLayout',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/FormLayout/FormLayout.tsx'
			},
			name: 'FormLayout',
			documentation: {
				path: 'src/components/FormLayout/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Heading',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Heading/Heading.tsx'
			},
			name: 'Heading',
			documentation: {
				path: 'src/components/Heading/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'element',
					type: {
						name: 'HeadingTagName',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Icon',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Icon/Icon.tsx'
			},
			name: 'Icon',
			documentation: {
				path: 'src/components/Icon/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'source',
					type: {
						name: 'SVGSource | \\"placeholder\\" | \\"add\\" | \\"alert\\" | \\"arrowDown\\" | \\"arrowLeft\\" | \\"arrowRight\\" | \\"arrowUp...',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'color',
					type: {
						name: '\\"white\\" | \\"black\\" | \\"skyLighter\\" | \\"skyLight\\" | \\"sky\\" | \\"skyDark\\" | \\"inkLightest\\" | \\"inkLighter\\" ...',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'backdrop',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accessibilityLabel',
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Image',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Image/Image.tsx'
			},
			name: 'Image',
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'alt',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'source',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sourceSet',
					type: {
						name: 'SourceSet[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defaultChecked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defaultValue',
					type: {
						name: 'string | string[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'suppressContentEditableWarning',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accept',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'acceptCharset',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accessKey',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'action',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'allowFullScreen',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'allowTransparency',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'async',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoComplete',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoFocus',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoPlay',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'capture',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cellPadding',
					type: {
						name: 'string | number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cellSpacing',
					type: {
						name: 'string | number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'charSet',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'challenge',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cite',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'classID',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'className',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cols',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'colSpan',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'content',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'contentEditable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'contextMenu',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'controls',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'coords',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'crossOrigin',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'data',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dateTime',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'default',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defer',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dir',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'download',
					type: {
						name: 'any',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'draggable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'encType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'form',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formAction',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formEncType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formMethod',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formNoValidate',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formTarget',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'frameBorder',
					type: {
						name: 'string | number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'headers',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'height',
					type: {
						name: 'string | number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'hidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'high',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'href',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'hrefLang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'htmlFor',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'httpEquiv',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'inputMode',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'integrity',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'is',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'keyParams',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'keyType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'kind',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'lang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'list',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'loop',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'low',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'manifest',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'marginHeight',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'marginWidth',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'max',
					type: {
						name: 'string | number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'maxLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'media',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'mediaGroup',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'method',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'min',
					type: {
						name: 'string | number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'minLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'multiple',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'muted',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'nonce',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'noValidate',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'open',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'optimum',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'pattern',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'placeholder',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'playsInline',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'poster',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'preload',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'radioGroup',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'readOnly',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rel',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'required',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'reversed',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'role',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rows',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rowSpan',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sandbox',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scope',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scoped',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scrolling',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'seamless',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'selected',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'shape',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'size',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sizes',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'slot',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'span',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'spellCheck',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'src',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcDoc',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcLang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcSet',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'start',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'step',
					type: {
						name: 'string | number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'style',
					type: {
						name: 'CSSProperties',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'summary',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'tabIndex',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'target',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'type',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'useMap',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string | number | string[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'width',
					type: {
						name: 'string | number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'wmode',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'wrap',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'about',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'datatype',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'inlist',
					type: {
						name: 'any',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'prefix',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'property',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'resource',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'typeof',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'vocab',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoCapitalize',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoCorrect',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoSave',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'color',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemProp',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemScope',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemID',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemRef',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'results',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'security',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'unselectable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dangerouslySetInnerHTML',
					type: {
						name: '{ __html: string; }',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCopy',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCopyCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCut',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCutCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPaste',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPasteCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionEnd',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionEndCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionStart',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionStartCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionUpdate',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionUpdateCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'EventHandler<FocusEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocusCapture',
					type: {
						name: 'EventHandler<FocusEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'EventHandler<FocusEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlurCapture',
					type: {
						name: 'EventHandler<FocusEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChangeCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInput',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInputCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onReset',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onResetCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSubmit',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSubmitCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInvalid',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInvalidCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoad',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onError',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onErrorCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyDownCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyPress',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyPressCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyUp',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyUpCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAbort',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAbortCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlay',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayThrough',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayThroughCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDurationChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDurationChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEmptied',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEmptiedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEncrypted',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEncryptedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEnded',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEndedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedData',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedDataCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedMetadata',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedMetadataCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadStart',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadStartCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPause',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPauseCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlay',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlayCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlaying',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlayingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onProgress',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onProgressCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onRateChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onRateChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeeked',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeekedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeeking',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeekingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onStalled',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onStalledCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSuspend',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSuspendCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTimeUpdate',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTimeUpdateCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onVolumeChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onVolumeChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWaiting',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWaitingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onClickCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onContextMenu',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onContextMenuCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDoubleClick',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDoubleClickCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDrag',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnd',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEndCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnter',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnterCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragExit',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragExitCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragLeave',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragLeaveCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragOver',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragOverCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragStart',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragStartCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDrop',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDropCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseDown',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseDownCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseMove',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseMoveCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOut',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOutCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOver',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOverCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseUp',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseUpCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSelect',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSelectCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchCancel',
					type: {
						name: 'EventHandler<TouchEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchCancelCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchEnd',
					type: {
						name: 'EventHandler<TouchEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchEndCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchMove',
					type: {
						name: 'EventHandler<TouchEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchMoveCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchStart',
					type: {
						name: 'EventHandler<TouchEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchStartCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onScroll',
					type: {
						name: 'EventHandler<UIEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onScrollCapture',
					type: {
						name: 'EventHandler<UIEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWheel',
					type: {
						name: 'EventHandler<WheelEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWheelCapture',
					type: {
						name: 'EventHandler<WheelEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationStart',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationStartCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationEnd',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationEndCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationIteration',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationIterationCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTransitionEnd',
					type: {
						name: 'EventHandler<TransitionEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTransitionEndCapture',
					type: {
						name: 'EventHandler<TransitionEvent<HTMLImageElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'ref',
					type: {
						name: 'Ref<HTMLImageElement>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'key',
					type: {
						name: 'string | number',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/KeyboardKey',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/KeyboardKey/KeyboardKey.tsx'
			},
			name: 'KeyboardKey',
			documentation: {
				path: 'src/components/KeyboardKey/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/KeypressListener',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/KeypressListener/KeypressListener.tsx'
			},
			name: 'KeypressListener',
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'keyCode',
					type: {
						name: 'Keys',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'handler',
					type: {
						name: '(event: KeyboardEvent) => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Label',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Label/Label.tsx'
			},
			name: 'Label',
			properties: [
				{
					description: 'Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\\\nThe padding is applied from the start (left) of the current string.',
					isRequired: true,
					name: 'padStart',
					type: {
						name: '(maxLength: number, fillString?: string) => string',
						structure: {}
					}
				},
				{
					description: 'Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\\\nThe padding is applied from the end (right) of the current string.',
					isRequired: true,
					name: 'padEnd',
					type: {
						name: '(maxLength: number, fillString?: string) => string',
						structure: {}
					}
				},
				{
					description: 'Returns a string representation of a string.',
					isRequired: true,
					name: 'toString',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns the character at the specified index.',
					isRequired: true,
					name: 'charAt',
					type: {
						name: '(pos: number) => string',
						structure: {}
					}
				},
				{
					description: 'Returns the Unicode value of the character at the specified location.',
					isRequired: true,
					name: 'charCodeAt',
					type: {
						name: '(index: number) => number',
						structure: {}
					}
				},
				{
					description: 'Returns a string that contains the concatenation of two or more strings.',
					isRequired: true,
					name: 'concat',
					type: {
						name: '(...strings: string[]) => string',
						structure: {}
					}
				},
				{
					description: 'Returns the position of the first occurrence of a substring.',
					isRequired: true,
					name: 'indexOf',
					type: {
						name: '(searchString: string, position?: number) => number',
						structure: {}
					}
				},
				{
					description: 'Returns the last occurrence of a substring in the string.',
					isRequired: true,
					name: 'lastIndexOf',
					type: {
						name: '(searchString: string, position?: number) => number',
						structure: {}
					}
				},
				{
					description: 'Determines whether two strings are equivalent in the current locale.\\\\nDetermines whether two strings are equivalent in the current or specified locale.',
					isRequired: true,
					name: 'localeCompare',
					type: {
						name: '{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions):...',
						structure: {}
					}
				},
				{
					description: 'Matches a string with a regular expression, and returns an array containing the results of that search.\\\\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.',
					isRequired: true,
					name: 'match',
					type: {
						name: '{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExp...',
						structure: {}
					}
				},
				{
					description: 'Replaces text in a string, using a regular expression or search string.\\\\nReplaces text in a string, using a regular expression or search string.\\\\nReplaces text in a string, using an object that supports replacement within a string.\\\\nReplaces text in a string, using an object that supports replacement within a string.',
					isRequired: true,
					name: 'replace',
					type: {
						name: '{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, re...',
						structure: {}
					}
				},
				{
					description: 'Finds the first substring match in a regular expression search.\\\\nFinds the first substring match in a regular expression search.',
					isRequired: true,
					name: 'search',
					type: {
						name: '{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): nu...',
						structure: {}
					}
				},
				{
					description: 'Returns a section of a string.',
					isRequired: true,
					name: 'slice',
					type: {
						name: '(start?: number, end?: number) => string',
						structure: {}
					}
				},
				{
					description: 'Split a string into substrings using the specified separator and return them as an array.\\\\nSplit a string into substrings using the specified separator and return them as an array.',
					isRequired: true,
					name: 'split',
					type: {
						name: '{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: str...',
						structure: {}
					}
				},
				{
					description: 'Returns the substring at the specified location within a String object.',
					isRequired: true,
					name: 'substring',
					type: {
						name: '(start: number, end?: number) => string',
						structure: {}
					}
				},
				{
					description: 'Converts all the alphabetic characters in a string to lowercase.',
					isRequired: true,
					name: 'toLowerCase',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Converts all alphabetic characters to lowercase, taking into account the host environment\\\\'s current locale.',
					isRequired: true,
					name: 'toLocaleLowerCase',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Converts all the alphabetic characters in a string to uppercase.',
					isRequired: true,
					name: 'toUpperCase',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\\\\'s current locale.',
					isRequired: true,
					name: 'toLocaleUpperCase',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Removes the leading and trailing white space and line terminator characters from a string.',
					isRequired: true,
					name: 'trim',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns the length of a String object.',
					isRequired: true,
					name: 'length',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Gets a substring beginning at the specified location and having the specified length.',
					isRequired: true,
					name: 'substr',
					type: {
						name: '(from: number, length?: number) => string',
						structure: {}
					}
				},
				{
					description: 'Returns the primitive value of the specified object.',
					isRequired: true,
					name: 'valueOf',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Iterator',
					isRequired: true,
					name: '__@iterator',
					type: {
						name: '() => IterableIterator<string>',
						structure: {}
					}
				},
				{
					description: 'Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\\\\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\\\\nthe String resulting from converting this object to a String.\\\\nIf there is no element at that position, the result is undefined.\\\\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.',
					isRequired: true,
					name: 'codePointAt',
					type: {
						name: '(pos: number) => number',
						structure: {}
					}
				},
				{
					description: 'Returns true if searchString appears as a substring of the result of converting this\\\\nobject to a String, at one or more positions that are\\\\ngreater than or equal to position; otherwise, returns false.',
					isRequired: true,
					name: 'includes',
					type: {
						name: '(searchString: string, position?: number) => boolean',
						structure: {}
					}
				},
				{
					description: 'Returns true if the sequence of elements of searchString converted to a String is the\\\\nsame as the corresponding elements of this object (converted to a String) starting at\\\\nendPosition – length(this). Otherwise returns false.',
					isRequired: true,
					name: 'endsWith',
					type: {
						name: '(searchString: string, endPosition?: number) => boolean',
						structure: {}
					}
				},
				{
					description: 'Returns the String value result of normalizing the string into the normalization form\\\\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\\\\nReturns the String value result of normalizing the string into the normalization form\\\\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.',
					isRequired: true,
					name: 'normalize',
					type: {
						name: '{ (form: \\"NFC\\" | \\"NFD\\" | \\"NFKC\\" | \\"NFKD\\"): string; (form?: string): string; }',
						structure: {}
					}
				},
				{
					description: 'Returns a String value that is made from count copies appended together. If count is 0,\\\\nT is the empty String is returned.',
					isRequired: true,
					name: 'repeat',
					type: {
						name: '(count: number) => string',
						structure: {}
					}
				},
				{
					description: 'Returns true if the sequence of elements of searchString converted to a String is the\\\\nsame as the corresponding elements of this object (converted to a String) starting at\\\\nposition. Otherwise returns false.',
					isRequired: true,
					name: 'startsWith',
					type: {
						name: '(searchString: string, position?: number) => boolean',
						structure: {}
					}
				},
				{
					description: 'Returns an <a> HTML anchor element and sets the name attribute to the text value',
					isRequired: true,
					name: 'anchor',
					type: {
						name: '(name: string) => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <big> HTML element',
					isRequired: true,
					name: 'big',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <blink> HTML element',
					isRequired: true,
					name: 'blink',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <b> HTML element',
					isRequired: true,
					name: 'bold',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Returns a <tt> HTML element',
					isRequired: true,
					name: 'fixed',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <font> HTML element and sets the color attribute value',
					isRequired: true,
					name: 'fontcolor',
					type: {
						name: '(color: string) => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <font> HTML element and sets the size attribute value \\\\nReturns a <font> HTML element and sets the size attribute value',
					isRequired: true,
					name: 'fontsize',
					type: {
						name: '{ (size: number): string; (size: string): string; }',
						structure: {}
					}
				},
				{
					description: 'Returns an <i> HTML element',
					isRequired: true,
					name: 'italics',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns an <a> HTML element and sets the href attribute value',
					isRequired: true,
					name: 'link',
					type: {
						name: '(url: string) => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <small> HTML element',
					isRequired: true,
					name: 'small',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <strike> HTML element',
					isRequired: true,
					name: 'strike',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <sub> HTML element',
					isRequired: true,
					name: 'sub',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: 'Returns a <sup> HTML element',
					isRequired: true,
					name: 'sup',
					type: {
						name: '() => string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'strip',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'stripColors',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'black',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'red',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'green',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'yellow',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'blue',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'magenta',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'cyan',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'white',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'gray',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'grey',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'bgBlack',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'bgRed',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'bgGreen',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'bgYellow',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'bgBlue',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'bgMagenta',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'bgCyan',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'bgWhite',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'reset',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'dim',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'italic',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'underline',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'inverse',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'hidden',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'strikethrough',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'rainbow',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'zebra',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'america',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'trap',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'random',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'zalgo',
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Labelled',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Labelled/Labelled.tsx'
			},
			name: 'Labelled',
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'error',
					type: {
						name: 'Error',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'action',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'helpText',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'labelHidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Layout',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Layout/Layout.tsx'
			},
			name: 'Layout',
			documentation: {
				path: 'src/components/Layout/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sectioned',
					type: {
						name: 'boolean',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Link',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Link/Link.tsx'
			},
			name: 'Link',
			documentation: {
				path: 'src/components/Link/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'url',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'external',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onClick',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/List',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/List/List.tsx'
			},
			name: 'List',
			documentation: {
				path: 'src/components/List/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'type',
					type: {
						name: 'Type',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Page',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Page/Page.tsx'
			},
			name: 'Page',
			documentation: {
				path: 'src/components/Page/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'fullWidth',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'separator',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'breadcrumbs',
					type: {
						name: 'LinkAction[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'secondaryActions',
					type: {
						name: 'IconableAction[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'primaryAction',
					type: {
						name: 'DisableableAction',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'pagination',
					type: {
						name: 'PaginationDescriptor',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'actionGroups',
					type: {
						name: 'ActionGroup[]',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/PageActions',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/PageActions/PageActions.tsx'
			},
			name: 'PageActions',
			documentation: {
				path: 'src/components/PageActions/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'primaryAction',
					type: {
						name: 'DisableableAction',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'secondaryActions',
					type: {
						name: 'ComplexAction[]',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Pagination',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Pagination/Pagination.tsx'
			},
			name: 'Pagination',
			documentation: {
				path: 'src/components/Pagination/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'plain',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'hasNext',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'hasPrevious',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'nextURL',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'previousURL',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onNext',
					type: {
						name: '() => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPrevious',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Popover',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Popover/Popover.tsx'
			},
			name: 'Popover',
			documentation: {
				path: 'src/components/Popover/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'active',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'activator',
					type: {
						name: 'ReactElement<any>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'preferredPosition',
					type: {
						name: 'PreferredPosition',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'activatorWrapper',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'preventAutofocus',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sectioned',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'fullWidth',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'onClose',
					type: {
						name: '(source: CloseSource) => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/PositionedOverlay',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/PositionedOverlay/PositionedOverlay.tsx'
			},
			name: 'PositionedOverlay',
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'active',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'activator',
					type: {
						name: 'HTMLElement',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'preferredPosition',
					type: {
						name: 'PreferredPosition',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'fullWidth',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'render',
					type: {
						name: '(overlayDetails: OverlayDetails) => ReactNode',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onScrollOut',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/RadioButton',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/RadioButton/RadioButton.tsx'
			},
			name: 'RadioButton',
			documentation: {
				path: 'src/components/RadioButton/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'labelHidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'helpText',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: '(newValue: boolean, id: string) => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: '() => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/ResourceList',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/ResourceList/ResourceList.tsx'
			},
			name: 'ResourceList',
			documentation: {
				path: 'src/components/ResourceList/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'items',
					type: {
						name: 'any[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'renderItem',
					type: {
						name: '(item: any, index: number) => ReactNode',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Scrollable',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Scrollable/Scrollable.tsx'
			},
			name: 'Scrollable',
			documentation: {
				path: 'src/components/Scrollable/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'vertical',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'horizontal',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'shadow',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defaultChecked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defaultValue',
					type: {
						name: 'string | string[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'suppressContentEditableWarning',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accept',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'acceptCharset',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accessKey',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'action',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'allowFullScreen',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'allowTransparency',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'alt',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'async',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoComplete',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoFocus',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoPlay',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'capture',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cellPadding',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cellSpacing',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'charSet',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'challenge',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cite',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'classID',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'className',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cols',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'colSpan',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'content',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'contentEditable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'contextMenu',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'controls',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'coords',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'crossOrigin',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'data',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dateTime',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'default',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defer',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dir',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'download',
					type: {
						name: 'any',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'draggable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'encType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'form',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formAction',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formEncType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formMethod',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formNoValidate',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formTarget',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'frameBorder',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'headers',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'height',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'hidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'high',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'href',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'hrefLang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'htmlFor',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'httpEquiv',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'inputMode',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'integrity',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'is',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'keyParams',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'keyType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'kind',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'lang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'list',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'loop',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'low',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'manifest',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'marginHeight',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'marginWidth',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'max',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'maxLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'media',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'mediaGroup',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'method',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'min',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'minLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'multiple',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'muted',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'nonce',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'noValidate',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'open',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'optimum',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'pattern',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'placeholder',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'playsInline',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'poster',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'preload',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'radioGroup',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'readOnly',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rel',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'required',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'reversed',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'role',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rows',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rowSpan',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sandbox',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scope',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scoped',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scrolling',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'seamless',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'selected',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'shape',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'size',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sizes',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'slot',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'span',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'spellCheck',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'src',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcDoc',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcLang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcSet',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'start',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'step',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'style',
					type: {
						name: 'CSSProperties',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'summary',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'tabIndex',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'target',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'type',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'useMap',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string | number | string[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'width',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'wmode',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'wrap',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'about',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'datatype',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'inlist',
					type: {
						name: 'any',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'prefix',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'property',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'resource',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'typeof',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'vocab',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoCapitalize',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoCorrect',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoSave',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'color',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemProp',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemScope',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemID',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemRef',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'results',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'security',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'unselectable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dangerouslySetInnerHTML',
					type: {
						name: '{ __html: string; }',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCopy',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCopyCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCut',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCutCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPaste',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPasteCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionEnd',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionEndCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionStart',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionStartCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionUpdate',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionUpdateCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'EventHandler<FocusEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocusCapture',
					type: {
						name: 'EventHandler<FocusEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'EventHandler<FocusEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlurCapture',
					type: {
						name: 'EventHandler<FocusEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChangeCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInput',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInputCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onReset',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onResetCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSubmit',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSubmitCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInvalid',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInvalidCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoad',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onError',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onErrorCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyDownCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyPress',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyPressCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyUp',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyUpCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAbort',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAbortCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlay',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayThrough',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayThroughCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDurationChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDurationChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEmptied',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEmptiedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEncrypted',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEncryptedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEnded',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEndedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedData',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedDataCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedMetadata',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedMetadataCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadStart',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadStartCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPause',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPauseCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlay',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlayCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlaying',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlayingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onProgress',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onProgressCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onRateChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onRateChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeeked',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeekedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeeking',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeekingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onStalled',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onStalledCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSuspend',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSuspendCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTimeUpdate',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTimeUpdateCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onVolumeChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onVolumeChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWaiting',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWaitingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onClickCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onContextMenu',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onContextMenuCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDoubleClick',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDoubleClickCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDrag',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnd',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEndCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnter',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnterCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragExit',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragExitCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragLeave',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragLeaveCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragOver',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragOverCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragStart',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragStartCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDrop',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDropCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseDown',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseDownCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseMove',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseMoveCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOut',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOutCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOver',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOverCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseUp',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseUpCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSelect',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSelectCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchCancel',
					type: {
						name: 'EventHandler<TouchEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchCancelCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchEnd',
					type: {
						name: 'EventHandler<TouchEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchEndCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchMove',
					type: {
						name: 'EventHandler<TouchEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchMoveCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchStart',
					type: {
						name: 'EventHandler<TouchEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchStartCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onScroll',
					type: {
						name: 'EventHandler<UIEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onScrollCapture',
					type: {
						name: 'EventHandler<UIEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWheel',
					type: {
						name: 'EventHandler<WheelEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWheelCapture',
					type: {
						name: 'EventHandler<WheelEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationStart',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationStartCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationEnd',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationEndCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationIteration',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationIterationCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTransitionEnd',
					type: {
						name: 'EventHandler<TransitionEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTransitionEndCapture',
					type: {
						name: 'EventHandler<TransitionEvent<HTMLDivElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'ref',
					type: {
						name: 'Ref<HTMLDivElement>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'key',
					type: {
						name: 'ReactText',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Select',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Select/Select.tsx'
			},
			name: 'Select',
			documentation: {
				path: 'src/components/Select/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'options',
					type: {
						name: 'Option[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'groups',
					type: {
						name: '(string | { value: string; label: string; disabled?: boolean; } | Group)[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'labelAction',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'labelHidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'helpText',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'error',
					type: {
						name: 'Error',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'placeholder',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: '(selected: string, id: string) => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: '() => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/SettingAction',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/SettingAction/SettingAction.tsx'
			},
			name: 'SettingAction',
			documentation: {
				path: 'src/components/SettingAction/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'action',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/SettingToggle',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/SettingToggle/SettingToggle.tsx'
			},
			name: 'SettingToggle',
			documentation: {
				path: 'src/components/SettingToggle/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'enabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'action',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Stack',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Stack/Stack.tsx'
			},
			name: 'Stack',
			documentation: {
				path: 'src/components/Stack/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'any',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'vertical',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'spacing',
					type: {
						name: 'Spacing',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'alignment',
					type: {
						name: 'Alignment',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'distribution',
					type: {
						name: 'Distribution',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Subheading',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Subheading/Subheading.tsx'
			},
			name: 'Subheading',
			documentation: {
				path: 'src/components/Subheading/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'element',
					type: {
						name: 'HeadingTagName',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Tabs',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Tabs/Tabs.tsx'
			},
			name: 'Tabs',
			documentation: {
				path: 'src/components/Tabs/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'selected',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'tabs',
					type: {
						name: 'TabDescriptor[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'fitted',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSelect',
					type: {
						name: '(selectedTabIndex: number) => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Tag',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Tag/Tag.tsx'
			},
			name: 'Tag',
			documentation: {
				path: 'src/components/Tag/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onRemove',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/TextContainer',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/TextContainer/TextContainer.tsx'
			},
			name: 'TextContainer',
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/TextField',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/TextField/TextField.tsx'
			},
			name: 'TextField',
			documentation: {
				path: 'src/components/TextField/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'prefix',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'suffix',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'placeholder',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'helpText',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'labelAction',
					type: {
						name: 'Action',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'labelHidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'readOnly',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoFocus',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'multiline',
					type: {
						name: 'number | boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'error',
					type: {
						name: 'Error',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'connectedRight',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'connectedLeft',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'type',
					type: {
						name: 'Type',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'step',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoComplete',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'max',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'maxLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'min',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'minLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'pattern',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'spellCheck',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: '(value: string, id: string) => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: '() => void',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: '() => void',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/TextStyle',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/TextStyle/TextStyle.tsx'
			},
			name: 'TextStyle',
			documentation: {
				path: 'src/components/TextStyle/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'variation',
					type: {
						name: 'Variation',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Thumbnail',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Thumbnail/Thumbnail.tsx'
			},
			name: 'Thumbnail',
			documentation: {
				path: 'src/components/Thumbnail/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'source',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'alt',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'size',
					type: {
						name: 'Size',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/Tooltip',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/Tooltip/Tooltip.tsx'
			},
			name: 'Tooltip',
			documentation: {
				path: 'src/components/Tooltip/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'content',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'active',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'light',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'preferredPosition',
					type: {
						name: 'PreferredPosition',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'activatorWrapper',
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/UnstyledLink',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/UnstyledLink/UnstyledLink.tsx'
			},
			name: 'UnstyledLink',
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: true,
					name: 'url',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'external',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defaultChecked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defaultValue',
					type: {
						name: 'string | string[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'suppressContentEditableWarning',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accept',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'acceptCharset',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'accessKey',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'action',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'allowFullScreen',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'allowTransparency',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'alt',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'async',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoComplete',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoFocus',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoPlay',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'capture',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cellPadding',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cellSpacing',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'charSet',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'challenge',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cite',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'classID',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'className',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'cols',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'colSpan',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'content',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'contentEditable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'contextMenu',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'controls',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'coords',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'crossOrigin',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'data',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dateTime',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'default',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'defer',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dir',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'download',
					type: {
						name: 'any',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'draggable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'encType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'form',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formAction',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formEncType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formMethod',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formNoValidate',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'formTarget',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'frameBorder',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'headers',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'height',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'hidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'high',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'href',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'hrefLang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'htmlFor',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'httpEquiv',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'inputMode',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'integrity',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'is',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'keyParams',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'keyType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'kind',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'label',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'lang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'list',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'loop',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'low',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'manifest',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'marginHeight',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'marginWidth',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'max',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'maxLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'media',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'mediaGroup',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'method',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'min',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'minLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'multiple',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'muted',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'nonce',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'noValidate',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'open',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'optimum',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'pattern',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'placeholder',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'playsInline',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'poster',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'preload',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'radioGroup',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'readOnly',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rel',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'required',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'reversed',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'role',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rows',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'rowSpan',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sandbox',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scope',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scoped',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'scrolling',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'seamless',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'selected',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'shape',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'size',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'sizes',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'slot',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'span',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'spellCheck',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'src',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcDoc',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcLang',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'srcSet',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'start',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'step',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'style',
					type: {
						name: 'CSSProperties',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'summary',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'tabIndex',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'target',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'type',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'useMap',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string | number | string[]',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'width',
					type: {
						name: 'ReactText',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'wmode',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'wrap',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'about',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'datatype',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'inlist',
					type: {
						name: 'any',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'prefix',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'property',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'resource',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'typeof',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'vocab',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoCapitalize',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoCorrect',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'autoSave',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'color',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemProp',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemScope',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemType',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemID',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'itemRef',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'results',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'security',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'unselectable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'dangerouslySetInnerHTML',
					type: {
						name: '{ __html: string; }',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCopy',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCopyCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCut',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCutCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPaste',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPasteCapture',
					type: {
						name: 'EventHandler<ClipboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionEnd',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionEndCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionStart',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionStartCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionUpdate',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCompositionUpdateCapture',
					type: {
						name: 'EventHandler<CompositionEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'EventHandler<FocusEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onFocusCapture',
					type: {
						name: 'EventHandler<FocusEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'EventHandler<FocusEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onBlurCapture',
					type: {
						name: 'EventHandler<FocusEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onChangeCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInput',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInputCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onReset',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onResetCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSubmit',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSubmitCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInvalid',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onInvalidCapture',
					type: {
						name: 'EventHandler<FormEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoad',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onError',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onErrorCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyDownCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyPress',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyPressCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyUp',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onKeyUpCapture',
					type: {
						name: 'EventHandler<KeyboardEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAbort',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAbortCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlay',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayThrough',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onCanPlayThroughCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDurationChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDurationChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEmptied',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEmptiedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEncrypted',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEncryptedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEnded',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onEndedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedData',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedDataCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedMetadata',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadedMetadataCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadStart',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onLoadStartCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPause',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPauseCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlay',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlayCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlaying',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onPlayingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onProgress',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onProgressCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onRateChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onRateChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeeked',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeekedCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeeking',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSeekingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onStalled',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onStalledCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSuspend',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSuspendCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTimeUpdate',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTimeUpdateCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onVolumeChange',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onVolumeChangeCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWaiting',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWaitingCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onClickCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onContextMenu',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onContextMenuCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDoubleClick',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDoubleClickCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDrag',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnd',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEndCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnter',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragEnterCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragExit',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragExitCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragLeave',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragLeaveCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragOver',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragOverCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragStart',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDragStartCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDrop',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onDropCapture',
					type: {
						name: 'EventHandler<DragEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseDown',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseDownCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseMove',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseMoveCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOut',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOutCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOver',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseOverCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseUp',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onMouseUpCapture',
					type: {
						name: 'EventHandler<MouseEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSelect',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onSelectCapture',
					type: {
						name: 'EventHandler<SyntheticEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchCancel',
					type: {
						name: 'EventHandler<TouchEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchCancelCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchEnd',
					type: {
						name: 'EventHandler<TouchEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchEndCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchMove',
					type: {
						name: 'EventHandler<TouchEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchMoveCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchStart',
					type: {
						name: 'EventHandler<TouchEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTouchStartCapture',
					type: {
						name: 'EventHandler<TouchEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onScroll',
					type: {
						name: 'EventHandler<UIEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onScrollCapture',
					type: {
						name: 'EventHandler<UIEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWheel',
					type: {
						name: 'EventHandler<WheelEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onWheelCapture',
					type: {
						name: 'EventHandler<WheelEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationStart',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationStartCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationEnd',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationEndCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationIteration',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onAnimationIterationCapture',
					type: {
						name: 'EventHandler<AnimationEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTransitionEnd',
					type: {
						name: 'EventHandler<TransitionEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'onTransitionEndCapture',
					type: {
						name: 'EventHandler<TransitionEvent<HTMLAnchorElement>>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'ref',
					type: {
						name: 'Ref<HTMLAnchorElement>',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'key',
					type: {
						name: 'ReactText',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/components/VisuallyHidden',
			implementation: {
				framework: 'reactjs',
				lang: 'typescript',
				path: 'src/components/VisuallyHidden/VisuallyHidden.tsx'
			},
			name: 'VisuallyHidden',
			documentation: {
				path: 'src/components/VisuallyHidden/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				}
			]
		}
	],
	name: ''
}

"
`;
