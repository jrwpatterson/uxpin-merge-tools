// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The --dump option run for the arui-feather repository prints the JSON describing the full repository 1`] = `
"{
	components: [
		{
			dirPath: 'src/amount',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/amount/amount.jsx'
			},
			name: 'amount',
			documentation: {
				path: 'src/amount/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'amount',
					type: {
						name: 'shape',
						structure: {
							value: {
								name: 'number',
								structure: {}
							},
							currency: {
								name: 'shape',
								structure: {
									code: {
										name: 'string',
										structure: {}
									},
									minority: {
										name: 'number',
										structure: {}
									}
								}
							}
						}
					}
				},
				{
					description: 'Отображение минорной части, если она нулевая',
					isRequired: false,
					name: 'showZeroMinorPart',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Использовать компонент \`Heading\` для вывода числа',
					isRequired: false,
					name: 'isHeading',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/app-content',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/app-content/app-content.jsx'
			},
			name: 'app-content',
			documentation: {
				path: 'src/app-content/README.md'
			},
			properties: [
				{
					description: 'Дочерние элементы \`AppContent\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/app-menu',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/app-menu/app-menu.jsx'
			},
			name: 'app-menu',
			documentation: {
				path: 'src/app-menu/README.md'
			},
			properties: [
				{
					description: 'Дочерние элементы \`AppMenu\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/app-title',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/app-title/app-title.jsx'
			},
			name: 'app-title',
			documentation: {
				path: 'src/app-title/README.md'
			},
			properties: [
				{
					description: 'Дочерние элементы \`AppTitle\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/attach',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/attach/attach.jsx'
			},
			name: 'attach',
			documentation: {
				path: 'src/attach/README.md'
			},
			properties: [
				{
					description: 'Содержимое поля ввода, указанное по умолчанию. Принимает массив объектов типа File или null.',
					isRequired: false,
					name: 'value',
					type: {
						name: 'array',
						structure: {}
					}
				},
				{
					description: 'Уникальное имя блока',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Идентификатор компонента в DOM',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Иконка',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Последовательность перехода между контролами при нажатии на Tab',
					isRequired: false,
					name: 'tabIndex',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Текст для случая, когда файл не загружен',
					isRequired: false,
					name: 'noFileText',
					defaultValue: {
						value: 'Нет файла'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Содержимое кнопки для выбора файла',
					isRequired: false,
					name: 'buttonContent',
					defaultValue: {
						value: 'Выберите файл'
					},
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Свойства для кнопки',
					isRequired: false,
					name: 'buttonProps',
					type: {
						name: 'shape',
						structure: {
							text: {
								name: 'node',
								structure: {}
							},
							rightAddons: {
								name: 'node',
								structure: {}
							},
							leftAddons: {
								name: 'node',
								structure: {}
							},
							view: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'default'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'action'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'extra'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'other'
											}
										}
									]
								}
							},
							type: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'button'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'reset'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'submit'
											}
										}
									]
								}
							},
							tag: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'button'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'span'
											}
										}
									]
								}
							},
							width: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'default'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'available'
											}
										}
									]
								}
							},
							size: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 's'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'm'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'l'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'xl'
											}
										}
									]
								}
							},
							disabled: {
								name: 'boolean',
								structure: {}
							},
							pseudo: {
								name: 'boolean',
								structure: {}
							},
							id: {
								name: 'string',
								structure: {}
							},
							name: {
								name: 'string',
								structure: {}
							},
							title: {
								name: 'string',
								structure: {}
							},
							tabIndex: {
								name: 'number',
								structure: {}
							},
							togglable: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'check'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'radio'
											}
										}
									]
								}
							},
							checked: {
								name: 'boolean',
								structure: {}
							},
							theme: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'alfa-on-color'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'alfa-on-white'
											}
										}
									]
								}
							},
							className: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'func',
											structure: {}
										},
										{
											name: 'string',
											structure: {}
										}
									]
								}
							},
							onClick: {
								name: 'func',
								structure: {}
							},
							onFocus: {
								name: 'func',
								structure: {}
							},
							onBlur: {
								name: 'func',
								structure: {}
							},
							onMouseEnter: {
								name: 'func',
								structure: {}
							},
							onMouseLeave: {
								name: 'func',
								structure: {}
							},
							onMouseDown: {
								name: 'func',
								structure: {}
							},
							onMouseUp: {
								name: 'func',
								structure: {}
							},
							onKeyDown: {
								name: 'func',
								structure: {}
							},
							onKeyUp: {
								name: 'func',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Доступные для выбора MIME типы файлов',
					isRequired: false,
					name: 'accept',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью изменения значения компонента',
					isRequired: false,
					name: 'disabled',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управляет возможностью выбора нескольких файлов',
					isRequired: false,
					name: 'multiple',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика по компоненту кнопки',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик изменения значения \\\\'value\\\\'',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса компонента',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса компонента',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на кнопку',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с кнопки',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/button',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/button/button.jsx'
			},
			name: 'button',
			documentation: {
				path: 'src/button/README.md'
			},
			properties: [
				{
					description: 'Текст кнопки',
					isRequired: false,
					name: 'text',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Иконка кнопки',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Список произвольных элементов в левом слоте',
					isRequired: false,
					name: 'rightAddons',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Список произвольных элементов в правом слоте',
					isRequired: false,
					name: 'leftAddons',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Тип кнопки',
					isRequired: false,
					name: 'view',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'action'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'extra'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'other'
									}
								}
							]
						}
					}
				},
				{
					description: 'Поведение кнопки',
					isRequired: false,
					name: 'type',
					defaultValue: {
						value: 'button'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'button'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'reset'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'submit'
									}
								}
							]
						}
					}
				},
				{
					description: 'HTML элемент, которым будет компонент в DOM',
					isRequired: false,
					name: 'tag',
					defaultValue: {
						value: 'button'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'button'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'span'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление шириной кнопки. При значении \\\\'available\\\\' растягивает кнопку на ширину родителя',
					isRequired: false,
					name: 'width',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможности взаимодействия с компонентом',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Отображение кнопки в состоянии фокуса',
					isRequired: false,
					name: 'focused',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Псевдо представление кнопки',
					isRequired: false,
					name: 'pseudo',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Идентификатор компонента в DOM',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Отключает валидацию полей формы, у которых есть атрибут pattern',
					isRequired: false,
					name: 'formNoValidate',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Имя компонента в DOM',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Текст всплывающей подсказки',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Последовательность перехода между контролами при нажатии на Tab',
					isRequired: false,
					name: 'tabIndex',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Тип переключателя',
					isRequired: false,
					name: 'togglable',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'check'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'radio'
									}
								}
							]
						}
					}
				},
				{
					description: 'Отображение кнопки в отмеченном (зажатом) состоянии',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`Button\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика по кнопке',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса кнопки',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса кнопки',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на кнопку',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с кнопки',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события нажатия кнопки мыши в момент',
					isRequired: false,
					name: 'onMouseDown',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события отжатия кнопки мыши в момент',
					isRequired: false,
					name: 'onMouseUp',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события отведения курсора с кнопки',
					isRequired: false,
					name: 'onMouseOut',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyUp',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/calendar',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/calendar/calendar.jsx'
			},
			name: 'calendar',
			documentation: {
				path: 'src/calendar/README.md'
			},
			properties: [
				{
					description: 'Выбранная дата, в формате unix timestamp',
					isRequired: false,
					name: 'value',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Левая граница диапазона дат, в формате unix timestamp',
					isRequired: false,
					name: 'selectedFrom',
					defaultValue: {
						value: null
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Правая граница диапазона дат, в формате unix timestamp',
					isRequired: false,
					name: 'selectedTo',
					defaultValue: {
						value: null
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Левая граница дат, возможных для выбора, в формате unix timestamp',
					isRequired: false,
					name: 'earlierLimit',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Правая граница дат, возможных для выбора, в формате unix timestamp',
					isRequired: false,
					name: 'laterLimit',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Месяц, в формате unix timestamp',
					isRequired: false,
					name: 'month',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Обработчик смены даты',
					isRequired: false,
					name: 'onValueChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик смены месяца',
					isRequired: false,
					name: 'onMonthChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Тип форматирования даты при выводе',
					isRequired: false,
					name: 'outputFormat',
					defaultValue: {
						value: 'DD.MM.YYYY'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Список названий месяцев',
					isRequired: false,
					name: 'months',
					defaultValue: {
						value: [
							'Январь',
							'Февраль',
							'Март',
							'Апрель',
							'Май',
							'Июнь',
							'Июль',
							'Август',
							'Сентябрь',
							'Октябрь',
							'Ноябрь',
							'Декабрь'
						]
					},
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'string',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Список названий дней недели',
					isRequired: false,
					name: 'weekdays',
					defaultValue: {
						value: [
							'Пн',
							'Вт',
							'Ср',
							'Чт',
							'Пт',
							'Сб',
							'Вс'
						]
					},
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'string',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Список выходных дней в виде unix timestamp, отсортированный по возрастанию',
					isRequired: false,
					name: 'offDays',
					defaultValue: {
						value: []
					},
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'number',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Отображение стрелок навигации по месяцам',
					isRequired: false,
					name: 'showArrows',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Возможность управления календарём с клавиатуры',
					isRequired: false,
					name: 'isKeyboard',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyUp',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/calendar-input',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/calendar-input/calendar-input.jsx'
			},
			name: 'calendar-input',
			documentation: {
				path: 'src/calendar-input/README.md'
			},
			properties: [
				{
					description: 'Содержимое поля ввода',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Содержимое поля ввода, указанное по умолчанию',
					isRequired: false,
					name: 'defaultValue',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Свойства компонента [Calendar](../calendar/)',
					isRequired: false,
					name: 'calendar',
					type: {
						name: 'shape',
						structure: {
							value: {
								name: 'number',
								structure: {}
							},
							selectedFrom: {
								name: 'number',
								structure: {}
							},
							selectedTo: {
								name: 'number',
								structure: {}
							},
							earlierLimit: {
								name: 'number',
								structure: {}
							},
							laterLimit: {
								name: 'number',
								structure: {}
							},
							month: {
								name: 'number',
								structure: {}
							},
							onValueChange: {
								name: 'func',
								structure: {}
							},
							onMonthChange: {
								name: 'func',
								structure: {}
							},
							outputFormat: {
								name: 'string',
								structure: {}
							},
							months: {
								name: 'typedArray',
								structure: {
									memberType: {
										name: 'string',
										structure: {}
									}
								}
							},
							weekdays: {
								name: 'typedArray',
								structure: {
									memberType: {
										name: 'string',
										structure: {}
									}
								}
							},
							offDays: {
								name: 'typedArray',
								structure: {
									memberType: {
										name: 'number',
										structure: {}
									}
								}
							},
							showArrows: {
								name: 'boolean',
								structure: {}
							},
							isKeyboard: {
								name: 'boolean',
								structure: {}
							},
							error: {
								name: 'node',
								structure: {}
							},
							theme: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'alfa-on-color'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'alfa-on-white'
											}
										}
									]
								}
							},
							className: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'func',
											structure: {}
										},
										{
											name: 'string',
											structure: {}
										}
									]
								}
							},
							onKeyDown: {
								name: 'func',
								structure: {}
							},
							onKeyUp: {
								name: 'func',
								structure: {}
							},
							onFocus: {
								name: 'func',
								structure: {}
							},
							onBlur: {
								name: 'func',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Управление возможностью раскрытия календаря',
					isRequired: false,
					name: 'opened',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью компонента занимать всю ширину родителя',
					isRequired: false,
					name: 'width',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Направления, в которые может открываться попап компонента',
					isRequired: false,
					name: 'directions',
					defaultValue: {
						value: [
							'bottom-left',
							'bottom-right',
							'top-left',
							'top-right'
						]
					},
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'anchor'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-left'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-right'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-top'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-bottom'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-top'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-bottom'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-left'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-right'
											}
										}
									]
								}
							}
						}
					}
				},
				{
					description: 'Управление возможностью изменения значения компонента',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Последовательность перехода между контролами при нажатии на Tab',
					isRequired: false,
					name: 'tabIndex',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Показывать иконку календаря в инпуте',
					isRequired: false,
					name: 'withIcon',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Лейбл для поля',
					isRequired: false,
					name: 'label',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Подсказка в поле',
					isRequired: false,
					name: 'placeholder',
					defaultValue: {
						value: '00.00.0000'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Подсказка под полем',
					isRequired: false,
					name: 'hint',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Отображение ошибки',
					isRequired: false,
					name: 'error',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Управление нативным режимом на мобильных устройствах',
					isRequired: false,
					name: 'mobileMode',
					defaultValue: {
						value: 'native'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'native'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'popup'
									}
								}
							]
						}
					}
				},
				{
					description: 'Подсказка над меню в мобильном режиме',
					isRequired: false,
					name: 'mobileTitle',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Идентификатор компонента в DOM',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Имя компонента в DOM',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик установки фокуса на компонент',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса с компонента',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик установки фокуса на поле ввода',
					isRequired: false,
					name: 'onInputFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса с поля ввода',
					isRequired: false,
					name: 'onInputBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик ввода даты в текстовом поле',
					isRequired: false,
					name: 'onInputChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик выбора даты в календаре',
					isRequired: false,
					name: 'onCalendarChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обрабочик изменения даты в календаре',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события нажатия на клавишу в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится в календаре',
					isRequired: false,
					name: 'onCalendarKeyDown',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на текстовом поле',
					isRequired: false,
					name: 'onInputKeyDown',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/card-input',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/card-input/card-input.jsx'
			},
			name: 'card-input',
			documentation: {
				path: 'src/card-input/README.md'
			},
			properties: [
				{
					description: 'Подсказка в текстовом поле',
					isRequired: false,
					name: 'placeholder',
					defaultValue: {
						value: '0000 0000 0000 0000 00'
					},
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/checkbox',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/checkbox/checkbox.jsx'
			},
			name: 'checkbox',
			documentation: {
				path: 'src/checkbox/README.md'
			},
			properties: [
				{
					description: 'Текст подписи к чекбоксу',
					isRequired: false,
					name: 'text',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Идентификатор компонента в DOM',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Имя компонента в DOM',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Текст всплывающей подсказки',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Значение чекбокса, которое будет отправлено на сервер, если он выбран',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление шириной кнопки для типа \\\\'button\\\\'. При значении \\\\'available\\\\' растягивает кнопку на ширину родителя',
					isRequired: false,
					name: 'width',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тип чекбокса',
					isRequired: false,
					name: 'type',
					defaultValue: {
						value: 'normal'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'normal'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'button'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью изменять состояние \\\\'checked\\\\' компонента',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление состоянием вкл/выкл компонента',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление неопределенным состоянием чекбокса',
					isRequired: false,
					name: 'indeterminate',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик изменения значения \\\\'checked\\\\' компонента, принимает на вход isChecked и value компонента',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса комнонента',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса компонента',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на чекбокс',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с чекбокса',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/checkbox-group',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/checkbox-group/checkbox-group.jsx'
			},
			name: 'checkbox-group',
			documentation: {
				path: 'src/checkbox-group/README.md'
			},
			properties: [
				{
					description: 'Тип компонента',
					isRequired: false,
					name: 'type',
					defaultValue: {
						value: 'normal'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'normal'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'button'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'line'
									}
								}
							]
						}
					}
				},
				{
					description: 'Выбранные чекбокс-кнопки',
					isRequired: false,
					name: 'value',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'string',
											structure: {}
										},
										{
											name: 'number',
											structure: {}
										}
									]
								}
							}
						}
					}
				},
				{
					description: 'Отображение попапа с ошибкой в момент когда фокус находится на компоненте',
					isRequired: false,
					name: 'width',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Уникальное имя блока',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью изменения состояния \\\\'checked\\\\' дочерних компонентов \`CheckBox\`',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`CheckBoxGroup\`, как правило, компоненты \`CheckBox\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Лейбл для группы',
					isRequired: false,
					name: 'label',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса радиогруппы',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса с радиогруппы',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик изменения значения \\\\'checked\\\\' одного из дочерних радио-кнопок',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/collapse',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/collapse/collapse.jsx'
			},
			name: 'collapse',
			documentation: {
				path: 'src/collapse/README.md'
			},
			properties: [
				{
					description: 'Управление состоянием \`expand\`/\`collapse\` компонента',
					isRequired: false,
					name: 'isExpanded',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Текст ссылки в \`expand\` состоянии',
					isRequired: false,
					name: 'collapsedLabel',
					defaultValue: {
						value: 'Expand'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Текст ссылки в \`collapse\` состоянии',
					isRequired: false,
					name: 'expandedLabel',
					defaultValue: {
						value: 'Collapse'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`Collapse\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик смены состояния \`expand\`/\`collapse\`',
					isRequired: false,
					name: 'onExpandedChange',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/copyright',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/copyright/copyright.jsx'
			},
			name: 'copyright',
			documentation: {
				path: 'src/copyright/README.md'
			},
			properties: [
				{
					description: 'Дочерние элементы \`Copyright\`, заменяют собой стандартный текст copyright\\\\'а',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Отображение годов',
					isRequired: false,
					name: 'showYears',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/dropdown',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/dropdown/dropdown.jsx'
			},
			name: 'dropdown',
			documentation: {
				path: 'src/dropdown/README.md'
			},
			properties: [
				{
					description: 'Тип компонента',
					isRequired: false,
					name: 'switcherType',
					defaultValue: {
						value: 'link'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'link'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'button'
									}
								}
							]
						}
					}
				},
				{
					description: 'Текст кнопки компонента',
					isRequired: false,
					name: 'switcherText',
					defaultValue: {
						value: 'Switcher'
					},
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Компонент [Popup](../popup/)',
					isRequired: false,
					name: 'popupContent',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Свойства для компонента [Popup](../popup/)',
					isRequired: false,
					name: 'popupProps',
					type: {
						name: 'shape',
						structure: {
							className: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'func',
											structure: {}
										},
										{
											name: 'string',
											structure: {}
										}
									]
								}
							},
							type: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'default'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'tooltip'
											}
										}
									]
								}
							},
							height: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'default'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'available'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'adaptive'
											}
										}
									]
								}
							},
							directions: {
								name: 'typedArray',
								structure: {
									memberType: {
										name: 'union',
										structure: {
											elements: [
												{
													name: 'literal',
													structure: {
														value: 'anchor'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'top-left'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'top-center'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'top-right'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'left-top'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'left-center'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'left-bottom'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'right-top'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'right-center'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'right-bottom'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'bottom-left'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'bottom-center'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'bottom-right'
													}
												}
											]
										}
									}
								}
							},
							target: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'anchor'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'position'
											}
										}
									]
								}
							},
							mainOffset: {
								name: 'number',
								structure: {}
							},
							secondaryOffset: {
								name: 'number',
								structure: {}
							},
							fitContaiterOffset: {
								name: 'number',
								structure: {}
							},
							invalid: {
								name: 'boolean',
								structure: {}
							},
							visible: {
								name: 'boolean',
								structure: {}
							},
							autoclosable: {
								name: 'boolean',
								structure: {}
							},
							padded: {
								name: 'boolean',
								structure: {}
							},
							size: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 's'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'm'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'l'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'xl'
											}
										}
									]
								}
							},
							theme: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'alfa-on-color'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'alfa-on-white'
											}
										}
									]
								}
							},
							onMouseEnter: {
								name: 'func',
								structure: {}
							},
							onMouseLeave: {
								name: 'func',
								structure: {}
							},
							onClickOutside: {
								name: 'func',
								structure: {}
							},
							minWidth: {
								name: 'number',
								structure: {}
							},
							maxWidth: {
								name: 'number',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Управление возможностью отображать попап при наведении курсора',
					isRequired: false,
					name: 'mode',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'hover'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'normal'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью открытия попапа',
					isRequired: false,
					name: 'disabled',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление состоянием открыт/закрыт попапа',
					isRequired: false,
					name: 'opened',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Только для switcherType=\\\\'button\\\\'. Тип переключателя для кнопки, \\\\'check\\\\'',
					isRequired: false,
					name: 'togglable',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'button'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'check'
									}
								}
							]
						}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дочерние элементы \`Dropdown\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика по кнопке компонента',
					isRequired: false,
					name: 'onSwitcherClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на кнопку компонента',
					isRequired: false,
					name: 'onSwitcherMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с кнопки компонента',
					isRequired: false,
					name: 'onSwitcherMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на попап',
					isRequired: false,
					name: 'onPopupMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с попапа',
					isRequired: false,
					name: 'onPopupMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события клика попапа за пределами попапа',
					isRequired: false,
					name: 'onPopupClickOutside',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/email-input',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/email-input/email-input.jsx'
			},
			name: 'email-input',
			documentation: {
				path: 'src/email-input/README.md'
			},
			properties: []
		},
		{
			dirPath: 'src/error-page',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/error-page/error-page.jsx'
			},
			name: 'error-page',
			properties: [
				{
					description: 'Заголовок ошибки',
					isRequired: false,
					name: 'title',
					defaultValue: {
						value: 'Произошла ошибка'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Сообщение ошибки',
					isRequired: false,
					name: 'text',
					defaultValue: {
						value: 'Пожалуйста, повторите операцию через некоторое время.'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Шапка страницы',
					isRequired: false,
					name: 'header',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'href для ссылки \\\\'Вернуться в интернет-банк\\\\'',
					isRequired: false,
					name: 'returnUrl',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Альтернативный текст для ссылки \\\\'Вернуться в интернет-банк\\\\'',
					isRequired: false,
					name: 'returnTitle',
					defaultValue: {
						value: 'Вернуться в интернет-банк'
					},
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/footer',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/footer/footer.jsx'
			},
			name: 'footer',
			documentation: {
				path: 'src/footer/README.md'
			},
			properties: [
				{
					description: 'Меню в подвале',
					isRequired: false,
					name: 'menu',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Дополнительный текст',
					isRequired: false,
					name: 'additional',
					defaultValue: {
						value: 'Сделано в Альфа-Лаборатории'
					},
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Содержимое блока соц. сетей',
					isRequired: false,
					name: 'social',
					defaultValue: {
						value: null
					},
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Отображение блока соц. сетей',
					isRequired: false,
					name: 'showSocial',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Содержимое блока копирайта',
					isRequired: false,
					name: 'copyright',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Отображение годов в копирайте',
					isRequired: false,
					name: 'showYears',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/form',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/form/form.jsx'
			},
			name: 'form',
			documentation: {
				path: 'src/form/README.md'
			},
			properties: [
				{
					description: 'Способ кодирования данных формы при их отправке',
					isRequired: false,
					name: 'enctype',
					defaultValue: {
						value: 'application/x-www-form-urlencoded'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'application/x-www-form-urlencoded'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'multipart/form-data'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'text/plain'
									}
								}
							]
						}
					}
				},
				{
					description: 'Адрес отправки данных на сервер',
					isRequired: false,
					name: 'action',
					defaultValue: {
						value: '/'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Метод запроса',
					isRequired: false,
					name: 'method',
					defaultValue: {
						value: 'post'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'post'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'get'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тип формы',
					isRequired: false,
					name: 'view',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'line'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'normal'
									}
								}
							]
						}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Футер для формы',
					isRequired: false,
					name: 'footer',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Управление встроенным в браузер механизмом валидации формы',
					isRequired: false,
					name: 'noValidate',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление автозаполнением формы',
					isRequired: false,
					name: 'autocomplete',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы формы',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Идентификатор компонента в DOM',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Имя компонента в DOM',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Обработчик отправки формы',
					isRequired: false,
					name: 'onSubmit',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/form-field',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/form-field/form-field.jsx'
			},
			name: 'form-field',
			documentation: {
				path: 'src/form-field/README.md'
			},
			properties: [
				{
					description: 'Дочерние элементы \`FormField\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Заголовок для контрола',
					isRequired: false,
					name: 'label',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Расположение элемента label: \\\\'line\\\\'',
					isRequired: false,
					name: 'view',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/header',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/header/header.jsx'
			},
			name: 'header',
			documentation: {
				path: 'src/header/README.md'
			},
			properties: [
				{
					description: '',
					isRequired: false,
					name: 'root',
					defaultValue: {
						value: '/'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Содержимое кастомного логотипа в шапке',
					isRequired: false,
					name: 'logo',
					defaultValue: {
						value: null
					},
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Содержимое меню в шапке',
					isRequired: false,
					name: 'menu',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Содержимое блока пользователя',
					isRequired: false,
					name: 'user',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Содержимое блока контактов поддержки',
					isRequired: false,
					name: 'support',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Произвольный контент над логотипом и меню',
					isRequired: false,
					name: 'topContent',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью фиксирования шапки к верхнему краю окна',
					isRequired: false,
					name: 'fixed',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик события изменение размера шапки',
					isRequired: false,
					name: 'onResize',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события клика по логотипу Альфа-Банк',
					isRequired: false,
					name: 'onLogoClick',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/heading',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/heading/heading.jsx'
			},
			name: 'heading',
			documentation: {
				path: 'src/heading/README.md'
			},
			properties: [
				{
					description: 'Дочерние элементы \`Heading\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Размер, определяющий какой тег заголовка будет использоваться',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'xl'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/icon',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/icon/icon.jsx'
			},
			name: 'icon',
			documentation: {
				path: 'src/icon/README.md'
			},
			properties: [
				{
					description: 'Тип иконки',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'error'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'fail'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'ok'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'ok_filled'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'attachment'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'calendar'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'search'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'close'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'user'
									}
								}
							]
						}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xxl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дочерние элементы \`Icon\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-colored'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика по иконке',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/input',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/input/input.jsx'
			},
			name: 'input',
			documentation: {
				path: 'src/input/README.md'
			},
			properties: [
				{
					description: 'Тип поля.\\\\nВнимание, тип \\\\'number\\\\' не умеет работать с масками, в том числе с \\\\'selectionStart\\\\' и \\\\'selectionEnd\\\\'.\\\\nПодробнее: http://w3c.github.io/html/sec-forms.html#does-not-apply',
					isRequired: false,
					name: 'type',
					defaultValue: {
						value: 'text'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'number'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'card'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'email'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'file'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'hidden'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'money'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'password'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'tel'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'text'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью компонента занимать всю ширину родителя',
					isRequired: false,
					name: 'width',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление автозаполнением компонента',
					isRequired: false,
					name: 'autocomplete',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью изменения атрибута компонента (без установки класса-модификатора для оформления)',
					isRequired: false,
					name: 'disabledAttr',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью изменения класса-модификатора компонента',
					isRequired: false,
					name: 'focused',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Максимальное число символов',
					isRequired: false,
					name: 'maxLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Иконка компонента',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Управление наличием крестика, сбрасывающего значение \\\\'value\\\\'',
					isRequired: false,
					name: 'clear',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Уникальный идентификатор блока',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Уникальное имя блока',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Содержимое поля ввода',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Содержимое поля ввода, указанное по умолчанию',
					isRequired: false,
					name: 'defaultValue',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Последовательность перехода между контролами при нажатии на Tab',
					isRequired: false,
					name: 'tabIndex',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Определяет маску для ввода значений. [Шаблон маски](https://github.com/insin/inputmask-core#pattern)',
					isRequired: false,
					name: 'mask',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Кастомные форматтеры символов маски, использует формат formatCharacters из \`inputmask-core\`',
					isRequired: false,
					name: 'maskFormatCharacters',
					type: {
						name: 'objectOf',
						structure: {}
					}
				},
				{
					description: 'Стандартное ствойство HTMLInputElement \\\\'pattern\\\\'. Может быть использовано для показа корректной клавиатуры на мобильных устройствах.',
					isRequired: false,
					name: 'pattern',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Управление встроенной проверкой данных введённых пользователем в поле на корректность',
					isRequired: false,
					name: 'noValidate',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Добавление дополнительных элементов к инпуту слева',
					isRequired: false,
					name: 'leftAddons',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Добавление дополнительных элементов к инпуту справа',
					isRequired: false,
					name: 'rightAddons',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Лейбл для поля',
					isRequired: false,
					name: 'label',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Подсказка в поле',
					isRequired: false,
					name: 'placeholder',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Подсказка под полем',
					isRequired: false,
					name: 'hint',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Отображение ошибки',
					isRequired: false,
					name: 'error',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тултип, который появляется при наведении',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Обработчик изменения значения \\\\'value\\\\'',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса поля',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика по полю',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса с поля',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика по крестику сбрасываещему значение \\\\'value\\\\'',
					isRequired: false,
					name: 'onClearClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyUp',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события вставки текста в поле',
					isRequired: false,
					name: 'onPaste',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события касания по полю',
					isRequired: false,
					name: 'onTouchStart',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события прекращения касания по полю',
					isRequired: false,
					name: 'onTouchEnd',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события перемещения при касании по полю',
					isRequired: false,
					name: 'onTouchMove',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события прерывания касания по полю',
					isRequired: false,
					name: 'onTouchCancel',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик, вызываемый перед началом ввода в маскированное поле',
					isRequired: false,
					name: 'onProcessMaskInputEvent',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/input-autocomplete',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/input-autocomplete/input-autocomplete.jsx'
			},
			name: 'input-autocomplete',
			documentation: {
				path: 'src/input-autocomplete/README.md'
			},
			properties: [
				{
					description: 'Список вариантов выбора',
					isRequired: false,
					name: 'options',
					defaultValue: {
						value: []
					},
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'shape',
								structure: {
									type: {
										name: 'union',
										structure: {
											elements: [
												{
													name: 'literal',
													structure: {
														value: 'item'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'group'
													}
												}
											]
										}
									},
									value: {
										name: 'string',
										structure: {}
									},
									description: {
										name: 'node',
										structure: {}
									},
									text: {
										name: 'string',
										structure: {}
									},
									content: {
										name: 'array',
										structure: {}
									}
								}
							}
						}
					}
				},
				{
					description: 'Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления',
					isRequired: false,
					name: 'disabled',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление видимостью выпадающего списка',
					isRequired: false,
					name: 'opened',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью компонента занимать всю ширину родителя',
					isRequired: false,
					name: 'width',
					defaultValue: {
						value: 'default'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Ширинa выпадающего списка равна ширине инпута',
					isRequired: false,
					name: 'equalPopupWidth',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Определяет нужно или нет обновлять значение текстового поля при выборе варианта',
					isRequired: false,
					name: 'updateValueOnItemSelect',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Направления, в которые может открываться попап компонента',
					isRequired: false,
					name: 'directions',
					defaultValue: {
						value: [
							'bottom-left',
							'bottom-right',
							'top-left',
							'top-right'
						]
					},
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'top-left'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-right'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-top'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-bottom'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-top'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-bottom'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-left'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-right'
											}
										}
									]
								}
							}
						}
					}
				},
				{
					description: 'Обработчик выбора пункта в выпадающем меню',
					isRequired: false,
					name: 'onItemSelect',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/input-group',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/input-group/input-group.jsx'
			},
			name: 'input-group',
			documentation: {
				path: 'src/input-group/README.md'
			},
			properties: [
				{
					description: 'Управление возможностью компонента занимать всю ширину родителя',
					isRequired: false,
					name: 'width',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дочерние элементы \`InputGroup\`, как правило, компоненты \`Input\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/isolated-container',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/isolated-container/isolated-container.jsx'
			},
			name: 'isolated-container',
			properties: []
		},
		{
			dirPath: 'src/label',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/label/label.jsx'
			},
			name: 'label',
			documentation: {
				path: 'src/label/README.md'
			},
			properties: [
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дочерние элементы \`Label\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью рендерить компонент в одну сроку',
					isRequired: false,
					name: 'isNoWrap',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/link',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/link/link.jsx'
			},
			name: 'link',
			documentation: {
				path: 'src/link/README.md'
			},
			properties: [
				{
					description: 'Иконка ссылки',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Текст ссылки',
					isRequired: false,
					name: 'text',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'href ссылки',
					isRequired: false,
					name: 'url',
					defaultValue: {
						value: '#'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'target ссылки',
					isRequired: false,
					name: 'target',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: '_self'
									}
								},
								{
									name: 'literal',
									structure: {
										value: '_blank'
									}
								},
								{
									name: 'literal',
									structure: {
										value: '_parent'
									}
								},
								{
									name: 'literal',
									structure: {
										value: '_top'
									}
								}
							]
						}
					}
				},
				{
					description: 'Последовательность перехода между контролами при нажатии на Tab',
					isRequired: false,
					name: 'tabIndex',
					defaultValue: {
						value: 0
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью клика по ссылке',
					isRequired: false,
					name: 'disabled',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление состоянием ссылки выбран/не выбран',
					isRequired: false,
					name: 'checked',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Псевдо-ссылка (border-bottom: dotted)',
					isRequired: false,
					name: 'pseudo',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'xs'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дочерние элементы \`Link\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика но ссылке',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса компонента',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса компонента',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на ссылку',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с ссылки',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/list',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/list/list.jsx'
			},
			name: 'list',
			documentation: {
				path: 'src/list/README.md'
			},
			properties: [
				{
					description: 'Список элементов',
					isRequired: false,
					name: 'items',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'shape',
								structure: {
									key: {
										name: 'string',
										structure: {}
									},
									value: {
										name: 'node',
										structure: {}
									}
								}
							}
						}
					}
				},
				{
					description: 'Тип списка',
					isRequired: false,
					name: 'type',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'ordered'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/masked-input',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/masked-input/masked-input.jsx'
			},
			name: 'masked-input',
			properties: [
				{
					description: 'Маска для поля ввода, использует формат https://github.com/insin/inputmask-core',
					isRequired: true,
					name: 'mask',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Кастомные форматтеры символов маски, использует формат formatCharacters из \`inputmask-core\`',
					isRequired: false,
					name: 'formatCharacters',
					type: {
						name: 'objectOf',
						structure: {}
					}
				},
				{
					description: 'Максимальное число символов',
					isRequired: false,
					name: 'maxLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Обработчик, вызываемый перед началом ввода в поле',
					isRequired: false,
					name: 'onProcessInputEvent',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/menu',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/menu/menu.jsx'
			},
			name: 'menu',
			documentation: {
				path: 'src/menu/README.md'
			},
			properties: [
				{
					description: 'Тип расположения меню: \\\\'horizontal\\\\'',
					isRequired: false,
					name: 'view',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Размещение заголовка групп: обычное или в одну строку с первым элементом группы',
					isRequired: false,
					name: 'groupView',
					defaultValue: {
						value: 'default'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'line'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тип списка вариантов меню',
					isRequired: false,
					name: 'mode',
					defaultValue: {
						value: 'basic'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'basic'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'check'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'radio'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'radio-check'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью изменения значения',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление состоянием фокуса элемента',
					isRequired: false,
					name: 'focused',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление автоматическим фокусом на первом элементе при вызове публичного метода focus',
					isRequired: false,
					name: 'autoFocusFirstItem',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Элемент меню, на котором стоит выделение',
					isRequired: false,
					name: 'highlightedItem',
					type: {
						name: 'shape',
						structure: {
							ref: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'number',
											structure: {}
										},
										{
											name: 'string',
											structure: {}
										}
									]
								}
							},
							item: {
								name: 'any',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Список объектов ContentItem',
					isRequired: false,
					name: 'content',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'shape',
								structure: {
									type: {
										name: 'union',
										structure: {
											elements: [
												{
													name: 'literal',
													structure: {
														value: 'item'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'group'
													}
												}
											]
										}
									},
									value: {
										name: 'union',
										structure: {
											elements: [
												{
													name: 'string',
													structure: {}
												},
												{
													name: 'number',
													structure: {}
												}
											]
										}
									},
									content: {
										name: 'union',
										structure: {
											elements: [
												{
													name: 'node',
													structure: {}
												},
												{
													name: 'array',
													structure: {}
												}
											]
										}
									},
									props: {
										name: 'object',
										structure: {}
									}
								}
							}
						}
					}
				},
				{
					description: 'Список значений выбранных элементов',
					isRequired: false,
					name: 'checkedItems',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'string',
											structure: {}
										},
										{
											name: 'number',
											structure: {}
										}
									]
								}
							}
						}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Объект со стилями',
					isRequired: false,
					name: 'style',
					type: {
						name: 'custom',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика по варианту меню',
					isRequired: false,
					name: 'onItemClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик выбора варианта меню',
					isRequired: false,
					name: 'onItemCheck',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на меню',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с меню',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте',
					isRequired: false,
					name: 'onKeyUp',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события выделения элемента меню, принимает на вход переменную типа HighlightedItem',
					isRequired: false,
					name: 'onHighlightItem',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/menu-item',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/menu-item/menu-item.jsx'
			},
			name: 'menu-item',
			documentation: {
				path: 'src/menu-item/README.md'
			},
			properties: [
				{
					description: 'Тип элемента меню',
					isRequired: false,
					name: 'type',
					defaultValue: {
						value: 'link'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'link'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'dropdown'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'block'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тип ссылки, для компонента с type=\\\\'link\\\\'',
					isRequired: false,
					name: 'view',
					defaultValue: {
						value: 'plain'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'plain'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'underlined'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'pseudo'
									}
								}
							]
						}
					}
				},
				{
					description: 'href ссылки, для компонента с type=\\\\'link\\\\'',
					isRequired: false,
					name: 'url',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'target для ссылки',
					isRequired: false,
					name: 'target',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: '_self'
									}
								},
								{
									name: 'literal',
									structure: {
										value: '_blank'
									}
								},
								{
									name: 'literal',
									structure: {
										value: '_parent'
									}
								},
								{
									name: 'literal',
									structure: {
										value: '_top'
									}
								}
							]
						}
					}
				},
				{
					description: 'Уникальное значение элемента. Для использования в Menu',
					isRequired: false,
					name: 'value',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'string',
									structure: {}
								},
								{
									name: 'number',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Попап для компонента с type=\\\\'dropdown\\\\'',
					isRequired: false,
					name: 'popup',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью выбирать данный компонент',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление состоянием выбран/не выбран компонента',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление видимостью компонента',
					isRequired: false,
					name: 'hidden',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление визуальным выделением компонента',
					isRequired: false,
					name: 'hovered',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дочерние элементы \`MenuItem\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Только для type=\\\\'link\\\\', обработчик клика по компоненту',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса компонента',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса компонента',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на элемент меню',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с элемента меню',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/money-input',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/money-input/money-input.jsx'
			},
			name: 'money-input',
			documentation: {
				path: 'src/money-input/README.md'
			},
			properties: [
				{
					description: 'Максимально допустимая длина значения до запятой',
					isRequired: false,
					name: 'integerLength',
					defaultValue: {
						value: 9
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Максимально допустимая длина значения после запятой',
					isRequired: false,
					name: 'fractionLength',
					defaultValue: {
						value: 2
					},
					type: {
						name: 'number',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/mq',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/mq/mq.jsx'
			},
			name: 'mq',
			properties: [
				{
					description: 'Медиа запрос',
					isRequired: false,
					name: 'query',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Запрос на поддержку тач-событий',
					isRequired: false,
					name: 'touch',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`Mq\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик изменений в совпадении запросов',
					isRequired: false,
					name: 'onMatchChange',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/notification',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/notification/notification.jsx'
			},
			name: 'notification',
			documentation: {
				path: 'src/notification/README.md'
			},
			properties: [
				{
					description: 'Тип компонента',
					isRequired: false,
					name: 'status',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'error'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'fail'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'ok'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление видимостью компонента',
					isRequired: false,
					name: 'visible',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Отступ от верхнего края',
					isRequired: false,
					name: 'offset',
					defaultValue: {
						value: 0
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'К какому краю прижат попап',
					isRequired: false,
					name: 'stickTo',
					defaultValue: {
						value: 'left'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'left'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'right'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управляет отображением кнопки закрытия уведомления',
					isRequired: false,
					name: 'hasCloser',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`Notification\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Заголовок сообщения',
					isRequired: false,
					name: 'title',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Замена стандартной иконки',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Время до закрытия компонента',
					isRequired: false,
					name: 'autoCloseDelay',
					defaultValue: {
						value: 5000
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью закрытия компонента по клику вне его',
					isRequired: false,
					name: 'outsideClickClosable',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Обработчик события истечения времени до закрытия компонента',
					isRequired: false,
					name: 'onCloseTimeout',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика по крестику компонента',
					isRequired: false,
					name: 'onCloserClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на попап',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с попапа',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика вне компонента',
					isRequired: false,
					name: 'onClickOutside',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика по компоненту',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/page',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/page/page.jsx'
			},
			name: 'page',
			documentation: {
				path: 'src/page/README.md'
			},
			properties: [
				{
					description: 'Шапка страницы',
					isRequired: false,
					name: 'header',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`Page\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Футер страницы',
					isRequired: false,
					name: 'footer',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/paragraph',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/paragraph/paragraph.jsx'
			},
			name: 'paragraph',
			documentation: {
				path: 'src/paragraph/README.md'
			},
			properties: [
				{
					description: 'Тип параграфа',
					isRequired: false,
					name: 'view',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'lead'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'normal'
									}
								}
							]
						}
					}
				},
				{
					description: 'Маркер параграфа',
					isRequired: false,
					name: 'mark',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`Paragraph\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/phone-input',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/phone-input/phone-input.jsx'
			},
			name: 'phone-input',
			documentation: {
				path: 'src/phone-input/README.md'
			},
			properties: [
				{
					description: 'Подсказка в текстовом поле',
					isRequired: false,
					name: 'placeholder',
					defaultValue: {
						value: '+7 000 000 00 00'
					},
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/plate',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/plate/plate.jsx'
			},
			name: 'plate',
			properties: [
				{
					description: 'Управление наличием закрывающего крестика',
					isRequired: false,
					name: 'hasCloser',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Плоская тема',
					isRequired: false,
					name: 'isFlat',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`Plate\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика по плашке',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика по крестику',
					isRequired: false,
					name: 'onCloserClick',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/popup',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/popup/popup.jsx'
			},
			name: 'popup',
			documentation: {
				path: 'src/popup/README.md'
			},
			properties: [
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Дочерние элементы \`Popup\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тип попапа',
					isRequired: false,
					name: 'type',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'tooltip'
									}
								}
							]
						}
					}
				},
				{
					description: 'Подстраивание высоты попапа под край окна (\\\\'adaptive\\\\'), занятие попапом всей возможной высоты (\\\\'available\\\\'), \\\\'default\\\\'',
					isRequired: false,
					name: 'height',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'adaptive'
									}
								}
							]
						}
					}
				},
				{
					description: 'Только для target=\\\\'anchor\\\\', расположение (в порядке приоритета) относительно точки открытия. Первым указывается главное направление, через дефис - второстепенное направление',
					isRequired: false,
					name: 'directions',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'anchor'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-left'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-right'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-top'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-bottom'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-top'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-bottom'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-left'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-right'
											}
										}
									]
								}
							}
						}
					}
				},
				{
					description: 'Привязка компонента к другому элементу на странице, или его расположение независимо от остальных: \\\\'anchor\\\\', \\\\'position\\\\', \\\\'screen\\\\'',
					isRequired: false,
					name: 'target',
					defaultValue: {
						value: 'anchor'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'anchor'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'position'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'screen'
									}
								}
							]
						}
					}
				},
				{
					description: 'Только для target=\\\\'anchor\\\\'. Смещение в пикселях всплывающего окна относительно основного направления',
					isRequired: false,
					name: 'mainOffset',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Только для target=\\\\'anchor\\\\'. Смещение в пикселях всплывающего окна относительно второстепенного направления',
					isRequired: false,
					name: 'secondaryOffset',
					defaultValue: {
						value: 0
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Только для target=\\\\'anchor\\\\'. Минимально допустимое смещение в пикселях всплывающего окна от края его контейнера',
					isRequired: false,
					name: 'fitContaiterOffset',
					defaultValue: {
						value: 0
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Управление видимостью компонента',
					isRequired: false,
					name: 'visible',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью автозакрытия компонента',
					isRequired: false,
					name: 'autoclosable',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление выставлением модификатора для добавления внутренних отступов в стилях',
					isRequired: false,
					name: 'padded',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Элемент закреплённого заголовка для компонента',
					isRequired: false,
					name: 'header',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 's'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик события наведения курсора на попап',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с попапа',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика вне компонента',
					isRequired: false,
					name: 'onClickOutside',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Минимальная ширина попапа',
					isRequired: false,
					name: 'minWidth',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Максимальная ширина попапа',
					isRequired: false,
					name: 'maxWidth',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Указатель на родительский элемент',
					isRequired: false,
					name: 'for',
					type: {
						name: 'string',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/popup-container-provider',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/popup-container-provider/popup-container-provider.jsx'
			},
			name: 'popup-container-provider',
			properties: [
				{
					description: 'Дочерние элементы контейнера',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Объект со стилями',
					isRequired: false,
					name: 'style',
					type: {
						name: 'custom',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/popup-header',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/popup-header/popup-header.jsx'
			},
			name: 'popup-header',
			documentation: {
				path: 'src/popup-header/README.md'
			},
			properties: [
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Содержимое заголовка',
					isRequired: false,
					name: 'title',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика по кнопке закрытия',
					isRequired: false,
					name: 'onCloseClick',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/radio',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/radio/radio.jsx'
			},
			name: 'radio',
			documentation: {
				path: 'src/radio/README.md'
			},
			properties: [
				{
					description: 'Тип',
					isRequired: false,
					name: 'type',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'normal'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'button'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление состоянием вкл/выкл компонента',
					isRequired: false,
					name: 'checked',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью изменения состояние \\\\'checked\\\\' компонента',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Уникальный идентификатор блока',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Уникальное имя блока',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Значение радио-кнопки, которое будет отправлено на сервер, если она выбрана',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Текст подписи к радио-кнопке',
					isRequired: false,
					name: 'text',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Управление шириной кнопки для типа \\\\'button\\\\'. При значении \\\\'available\\\\' растягивает кнопку на ширину родителя',
					isRequired: false,
					name: 'width',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Отображение в состоянии ошибки',
					isRequired: false,
					name: 'error',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Последовательность перехода между контролами при нажатии на Tab',
					isRequired: false,
					name: 'tabIndex',
					defaultValue: {
						value: 0
					},
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик изменения значения \\\\'checked\\\\' компонента, принимает на вход isChecked и value компонента',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса комнонента',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса с компонента',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события наведения курсора на радио-кнопку',
					isRequired: false,
					name: 'onMouseEnter',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события снятия курсора с радио-кнопки',
					isRequired: false,
					name: 'onMouseLeave',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/radio-group',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/radio-group/radio-group.jsx'
			},
			name: 'radio-group',
			documentation: {
				path: 'src/radio-group/README.md'
			},
			properties: [
				{
					description: 'Тип группы кнопок',
					isRequired: false,
					name: 'type',
					defaultValue: {
						value: 'normal'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'normal'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'button'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'line'
									}
								}
							]
						}
					}
				},
				{
					description: 'Значение выбранной радио-кнопки',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Отображение попапа с ошибкой в момент когда фокус находится на компоненте',
					isRequired: false,
					name: 'error',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Управление шириной группы кнопок для типа \\\\'button\\\\'. При значении \\\\'available\\\\' растягивает группу на ширину родителя',
					isRequired: false,
					name: 'width',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Уникальное имя блока',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью изменения состояния \\\\'checked\\\\' дочерних компонентов \`Radio\`',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Дочерние элементы \`RadioGroup\`, как правило, компоненты \`Radio\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Лейбл для группы',
					isRequired: false,
					name: 'label',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Подсказка под полем',
					isRequired: false,
					name: 'hint',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса радиогруппы',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса с радиогруппы',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик изменения значения \\\\'checked\\\\' одного из дочерних радио-кнопок',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/render-in-container',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/render-in-container/render-in-container.jsx'
			},
			name: 'render-in-container',
			properties: [
				{
					description: 'Дочерние элементы контейнера',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Контейнер, в котором будет визуализирован компонент',
					isRequired: false,
					name: 'container',
					type: {
						name: 'custom',
						structure: {}
					}
				},
				{
					description: 'Callback на рендер компонента',
					isRequired: false,
					name: 'onRender',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/resize-sensor',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/resize-sensor/resize-sensor.jsx'
			},
			name: 'resize-sensor',
			properties: [
				{
					description: 'Callback на изменение размера родителя',
					isRequired: false,
					name: 'onResize',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/select',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/select/select.jsx'
			},
			name: 'select',
			documentation: {
				path: 'src/select/README.md'
			},
			properties: [
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тип выпадающего списка',
					isRequired: false,
					name: 'mode',
					defaultValue: {
						value: 'check'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'check'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'radio'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'radio-check'
									}
								}
							]
						}
					}
				},
				{
					description: 'Размещение заголовка групп: обычное или в одну строку с первым элементом группы',
					isRequired: false,
					name: 'groupView',
					defaultValue: {
						value: 'default'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'line'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью компонента занимать всю ширину родителя',
					isRequired: false,
					name: 'width',
					defaultValue: {
						value: 'default'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Направления, в которые может открываться попап компонента',
					isRequired: false,
					name: 'directions',
					defaultValue: {
						value: [
							'bottom-left',
							'bottom-right',
							'top-left',
							'top-right'
						]
					},
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'top-left'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'top-right'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-top'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'left-bottom'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-top'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'right-bottom'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-left'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-center'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'bottom-right'
											}
										}
									]
								}
							}
						}
					}
				},
				{
					description: 'Управление возможностью редактирования значения',
					isRequired: false,
					name: 'disabled',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление видимостью выпадающего списка',
					isRequired: false,
					name: 'opened',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Ширинa выпадающего списка равна ширине кнопки',
					isRequired: false,
					name: 'equalPopupWidth',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Список выбранных значений',
					isRequired: false,
					name: 'value',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'string',
											structure: {}
										},
										{
											name: 'number',
											structure: {}
										}
									]
								}
							}
						}
					}
				},
				{
					description: 'Список вариантов выбора',
					isRequired: false,
					name: 'options',
					defaultValue: {
						value: []
					},
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'shape',
								structure: {
									type: {
										name: 'union',
										structure: {
											elements: [
												{
													name: 'literal',
													structure: {
														value: 'item'
													}
												},
												{
													name: 'literal',
													structure: {
														value: 'group'
													}
												}
											]
										}
									},
									value: {
										name: 'union',
										structure: {
											elements: [
												{
													name: 'string',
													structure: {}
												},
												{
													name: 'number',
													structure: {}
												}
											]
										}
									},
									text: {
										name: 'node',
										structure: {}
									},
									nativeText: {
										name: 'string',
										structure: {}
									},
									description: {
										name: 'node',
										structure: {}
									},
									checkedText: {
										name: 'string',
										structure: {}
									},
									icon: {
										name: 'node',
										structure: {}
									},
									content: {
										name: 'array',
										structure: {}
									}
								}
							}
						}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Уникальный идентификатор блока',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Уникальное имя блока',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Лейбл для поля',
					isRequired: false,
					name: 'label',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Подсказка в поле',
					isRequired: false,
					name: 'placeholder',
					defaultValue: {
						value: 'Выберите:'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Подсказка под полем',
					isRequired: false,
					name: 'hint',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Отображение ошибки',
					isRequired: false,
					name: 'error',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Управление нативным режимом на мобильных устройствах',
					isRequired: false,
					name: 'mobileMenuMode',
					defaultValue: {
						value: 'native'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'native'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'popup'
									}
								}
							]
						}
					}
				},
				{
					description: 'Подсказка над меню в мобильном режиме',
					isRequired: false,
					name: 'mobileTitle',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик фокуса на компоненте',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик потери фокуса компонентом',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса на кнопке',
					isRequired: false,
					name: 'onButtonFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик потери у кнопки',
					isRequired: false,
					name: 'onButtonBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса на меню',
					isRequired: false,
					name: 'onMenuFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик потери фокуса у меню',
					isRequired: false,
					name: 'onMenuBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика по кнопке компонента',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика вне компонента',
					isRequired: false,
					name: 'onClickOutside',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик изменения значения',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик нажатия на клавишу',
					isRequired: false,
					name: 'onKeyDown',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Кастомный метод рендера содержимого кнопки, принимает на вход: массив элементов типа [CheckedOption](#CheckedOption)',
					isRequired: false,
					name: 'renderButtonContent',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/sidebar',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/sidebar/sidebar.jsx'
			},
			name: 'sidebar',
			documentation: {
				path: 'src/sidebar/README.md'
			},
			properties: [
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Дочерние компоненты',
					isRequired: false,
					name: 'children',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'typedArray',
									structure: {
										memberType: {
											name: 'node',
											structure: {}
										}
									}
								},
								{
									name: 'node',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Признак для отрисовки элемента закрытия',
					isRequired: false,
					name: 'hasCloser',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Признак появления холодильника',
					isRequired: true,
					name: 'visible',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика на элемент закрытия',
					isRequired: false,
					name: 'onCloserClick',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/slide-down',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/slide-down/slide-down.jsx'
			},
			name: 'slide-down',
			documentation: {
				path: 'src/slide-down/README.md'
			},
			properties: [
				{
					description: 'Управление состоянием expand/collapse компонента',
					isRequired: false,
					name: 'isExpanded',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Контент компонента',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'string',
									structure: {}
								},
								{
									name: 'func',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/spin',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/spin/spin.jsx'
			},
			name: 'spin',
			documentation: {
				path: 'src/spin/README.md'
			},
			properties: [
				{
					description: 'Управление видимостью компонента',
					isRequired: false,
					name: 'visible',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/support',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/support/support.jsx'
			},
			name: 'support',
			documentation: {
				path: 'src/support/README.md'
			},
			properties: [
				{
					description: 'Название города',
					isRequired: false,
					name: 'city',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Номер телефона',
					isRequired: false,
					name: 'phone',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик клика по городу',
					isRequired: false,
					name: 'onCityClick',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика по телефону',
					isRequired: false,
					name: 'onPhoneClick',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/textarea',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/textarea/textarea.jsx'
			},
			name: 'textarea',
			documentation: {
				path: 'src/textarea/README.md'
			},
			properties: [
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью компонента занимать всю ширину родителя',
					isRequired: false,
					name: 'width',
					defaultValue: {
						value: 'default'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'default'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'available'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление автозаполнением компонента',
					isRequired: false,
					name: 'autocomplete',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью изменения значения компонента',
					isRequired: false,
					name: 'disabled',
					defaultValue: {
						value: false
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Управление возможностью подстраивать высоту компонента под высоту текста',
					isRequired: false,
					name: 'autosize',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Максимальное число символов',
					isRequired: false,
					name: 'maxLength',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Уникальный идентификатор блока',
					isRequired: false,
					name: 'id',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Уникальное имя блока',
					isRequired: false,
					name: 'name',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Содержимое поля ввода, указанное по умолчанию (используйте это поле если хотите использовать компонент как uncontrolled)',
					isRequired: false,
					name: 'defaultValue',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Содержимое поля ввода',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Последовательность перехода между контролами при нажатии на Tab',
					isRequired: false,
					name: 'tabIndex',
					type: {
						name: 'number',
						structure: {}
					}
				},
				{
					description: 'Лейбл для поля',
					isRequired: false,
					name: 'label',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Подсказка в поле',
					isRequired: false,
					name: 'placeholder',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Подсказка под полем',
					isRequired: false,
					name: 'hint',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Отображение ошибки',
					isRequired: false,
					name: 'error',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Размер компонента',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'm'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 's'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'm'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'l'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'xl'
									}
								}
							]
						}
					}
				},
				{
					description: 'Управление возможностью изменения размеров компонента',
					isRequired: false,
					name: 'resize',
					defaultValue: {
						value: 'none'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'both'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'horizontal'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'vertical'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'none'
									}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'Обработчик изменения значения \\\\'value\\\\'',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик фокуса поля',
					isRequired: false,
					name: 'onFocus',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик снятия фокуса c поля',
					isRequired: false,
					name: 'onBlur',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события вставки текста в поле',
					isRequired: false,
					name: 'onPaste',
					type: {
						name: 'func',
						structure: {}
					}
				},
				{
					description: 'Обработчик события изменения высоты компонента со значением параметра \\"autosize\\" = true',
					isRequired: false,
					name: 'onHeightChange',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		},
		{
			dirPath: 'src/theme-provider',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/theme-provider/theme-provider.jsx'
			},
			name: 'theme-provider',
			properties: [
				{
					description: 'Дочерний элемент \`ThemeProvider\`',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-colored'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				}
			]
		},
		{
			dirPath: 'src/user',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/user/user.jsx'
			},
			name: 'user',
			documentation: {
				path: 'src/user/README.md'
			},
			properties: [
				{
					description: 'Дополнительный класс',
					isRequired: false,
					name: 'className',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'func',
									structure: {}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Иконка пользователя',
					isRequired: false,
					name: 'icon',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Имя пользователя',
					isRequired: false,
					name: 'text',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Тема компонента',
					isRequired: false,
					name: 'theme',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-color'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'alfa-on-white'
									}
								}
							]
						}
					}
				},
				{
					description: 'href ссылки с именем пользователя',
					isRequired: false,
					name: 'url',
					defaultValue: {
						value: '#'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Обработчик клика по пользователю',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {}
					}
				}
			]
		}
	],
	name: ''
}

"
`;
